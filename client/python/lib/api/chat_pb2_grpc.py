# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class TalkServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
                '/talk.TalkService/SendMessage',
                request_serializer=chat__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.SendMessageResponse.FromString,
                )
        self.EditMessage = channel.unary_unary(
                '/talk.TalkService/EditMessage',
                request_serializer=chat__pb2.EditMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.EditMessageResponse.FromString,
                )
        self.UnsendMessage = channel.unary_unary(
                '/talk.TalkService/UnsendMessage',
                request_serializer=chat__pb2.UnsendMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.UnsendMessageResponse.FromString,
                )
        self.HideMessage = channel.unary_unary(
                '/talk.TalkService/HideMessage',
                request_serializer=chat__pb2.HideMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.HideMessageResponse.FromString,
                )
        self.ReportMessage = channel.unary_unary(
                '/talk.TalkService/ReportMessage',
                request_serializer=chat__pb2.ReportMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.ReportMessageResponse.FromString,
                )
        self.GetContact = channel.unary_unary(
                '/talk.TalkService/GetContact',
                request_serializer=chat__pb2.GetContactRequest.SerializeToString,
                response_deserializer=chat__pb2.GetContactResponse.FromString,
                )
        self.GetContacts = channel.unary_unary(
                '/talk.TalkService/GetContacts',
                request_serializer=chat__pb2.GetContactsRequest.SerializeToString,
                response_deserializer=chat__pb2.GetContactsResponse.FromString,
                )
        self.UpdateContact = channel.unary_unary(
                '/talk.TalkService/UpdateContact',
                request_serializer=chat__pb2.UpdateContactRequest.SerializeToString,
                response_deserializer=chat__pb2.UpdateContactResponse.FromString,
                )
        self.BlockContact = channel.unary_unary(
                '/talk.TalkService/BlockContact',
                request_serializer=chat__pb2.BlockContactRequest.SerializeToString,
                response_deserializer=chat__pb2.BlockContactResponse.FromString,
                )
        self.ReportContact = channel.unary_unary(
                '/talk.TalkService/ReportContact',
                request_serializer=chat__pb2.ReportContactRequest.SerializeToString,
                response_deserializer=chat__pb2.ReportContactResponse.FromString,
                )
        self.SendFriendRequest = channel.unary_unary(
                '/talk.TalkService/SendFriendRequest',
                request_serializer=chat__pb2.SendFriendRequestRequest.SerializeToString,
                response_deserializer=chat__pb2.SendFriendRequestResponse.FromString,
                )
        self.AcceptFriendRequest = channel.unary_unary(
                '/talk.TalkService/AcceptFriendRequest',
                request_serializer=chat__pb2.AcceptFriendRequestRequest.SerializeToString,
                response_deserializer=chat__pb2.AcceptFriendRequestResponse.FromString,
                )
        self.RejectFriendRequest = channel.unary_unary(
                '/talk.TalkService/RejectFriendRequest',
                request_serializer=chat__pb2.RejectFriendRequestRequest.SerializeToString,
                response_deserializer=chat__pb2.RejectFriendRequestResponse.FromString,
                )
        self.GetAllFriendIds = channel.unary_unary(
                '/talk.TalkService/GetAllFriendIds',
                request_serializer=chat__pb2.GetAllFriendIdsRequest.SerializeToString,
                response_deserializer=chat__pb2.GetAllFriendIdsResponse.FromString,
                )
        self.GetAllFriendRequestIds = channel.unary_unary(
                '/talk.TalkService/GetAllFriendRequestIds',
                request_serializer=chat__pb2.GetAllFriendRequestIdsRequest.SerializeToString,
                response_deserializer=chat__pb2.GetAllFriendRequestIdsResponse.FromString,
                )
        self.GetALlFriendRequestedIds = channel.unary_unary(
                '/talk.TalkService/GetALlFriendRequestedIds',
                request_serializer=chat__pb2.GetALlFriendRequestedIdsRequest.SerializeToString,
                response_deserializer=chat__pb2.GetALlFriendRequestedIdsResponse.FromString,
                )
        self.GetFriendRequestStatus = channel.unary_unary(
                '/talk.TalkService/GetFriendRequestStatus',
                request_serializer=chat__pb2.GetFriendRequestStatusRequest.SerializeToString,
                response_deserializer=chat__pb2.GetFriendRequestStatusResponse.FromString,
                )
        self.GetAllBlockedIds = channel.unary_unary(
                '/talk.TalkService/GetAllBlockedIds',
                request_serializer=chat__pb2.GetAllBlockedIdsRequest.SerializeToString,
                response_deserializer=chat__pb2.GetAllBlockedIdsResponse.FromString,
                )
        self.FindUserByUserID = channel.unary_unary(
                '/talk.TalkService/FindUserByUserID',
                request_serializer=chat__pb2.FindUserByUserIDRequest.SerializeToString,
                response_deserializer=chat__pb2.FindUserByUserIDResponse.FromString,
                )
        self.FindUserByTicket = channel.unary_unary(
                '/talk.TalkService/FindUserByTicket',
                request_serializer=chat__pb2.FindUserByTicketRequest.SerializeToString,
                response_deserializer=chat__pb2.FindUserByTicketResponse.FromString,
                )
        self.FindUserByEmail = channel.unary_unary(
                '/talk.TalkService/FindUserByEmail',
                request_serializer=chat__pb2.FindUserByEmailRequest.SerializeToString,
                response_deserializer=chat__pb2.FindUserByEmailResponse.FromString,
                )
        self.UpdateProfile = channel.unary_unary(
                '/talk.TalkService/UpdateProfile',
                request_serializer=chat__pb2.UpdateProfileRequest.SerializeToString,
                response_deserializer=chat__pb2.UpdateProfileResponse.FromString,
                )
        self.GetProfile = channel.unary_unary(
                '/talk.TalkService/GetProfile',
                request_serializer=chat__pb2.GetProfileRequest.SerializeToString,
                response_deserializer=chat__pb2.GetProfileResponse.FromString,
                )
        self.UpdateSetting = channel.unary_unary(
                '/talk.TalkService/UpdateSetting',
                request_serializer=chat__pb2.UpdateSettingRequest.SerializeToString,
                response_deserializer=chat__pb2.UpdateSettingResponse.FromString,
                )
        self.GetSetting = channel.unary_unary(
                '/talk.TalkService/GetSetting',
                request_serializer=chat__pb2.GetSettingRequest.SerializeToString,
                response_deserializer=chat__pb2.GetSettingResponse.FromString,
                )
        self.FetchEvents = channel.unary_stream(
                '/talk.TalkService/FetchEvents',
                request_serializer=chat__pb2.FetchEventsRequest.SerializeToString,
                response_deserializer=chat__pb2.FetchEventsResponse.FromString,
                )
        self.GetAllTags = channel.unary_unary(
                '/talk.TalkService/GetAllTags',
                request_serializer=chat__pb2.GetAllTagsRequest.SerializeToString,
                response_deserializer=chat__pb2.GetAllTagsResponse.FromString,
                )
        self.CreateTag = channel.unary_unary(
                '/talk.TalkService/CreateTag',
                request_serializer=chat__pb2.CreateTagRequest.SerializeToString,
                response_deserializer=chat__pb2.CreateTagResponse.FromString,
                )
        self.DeleteTag = channel.unary_unary(
                '/talk.TalkService/DeleteTag',
                request_serializer=chat__pb2.DeleteTagRequest.SerializeToString,
                response_deserializer=chat__pb2.DeleteTagResponse.FromString,
                )
        self.AddTagToContact = channel.unary_unary(
                '/talk.TalkService/AddTagToContact',
                request_serializer=chat__pb2.AddTagToContactRequest.SerializeToString,
                response_deserializer=chat__pb2.AddTagToContactResponse.FromString,
                )


class TalkServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnsendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HideMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContacts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateContact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockContact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportContact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFriendRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptFriendRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectFriendRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllFriendIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllFriendRequestIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetALlFriendRequestedIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFriendRequestStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllBlockedIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUserByUserID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUserByTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUserByEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSetting(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSetting(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllTags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTagToContact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TalkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=chat__pb2.SendMessageRequest.FromString,
                    response_serializer=chat__pb2.SendMessageResponse.SerializeToString,
            ),
            'EditMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.EditMessage,
                    request_deserializer=chat__pb2.EditMessageRequest.FromString,
                    response_serializer=chat__pb2.EditMessageResponse.SerializeToString,
            ),
            'UnsendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.UnsendMessage,
                    request_deserializer=chat__pb2.UnsendMessageRequest.FromString,
                    response_serializer=chat__pb2.UnsendMessageResponse.SerializeToString,
            ),
            'HideMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.HideMessage,
                    request_deserializer=chat__pb2.HideMessageRequest.FromString,
                    response_serializer=chat__pb2.HideMessageResponse.SerializeToString,
            ),
            'ReportMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportMessage,
                    request_deserializer=chat__pb2.ReportMessageRequest.FromString,
                    response_serializer=chat__pb2.ReportMessageResponse.SerializeToString,
            ),
            'GetContact': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContact,
                    request_deserializer=chat__pb2.GetContactRequest.FromString,
                    response_serializer=chat__pb2.GetContactResponse.SerializeToString,
            ),
            'GetContacts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContacts,
                    request_deserializer=chat__pb2.GetContactsRequest.FromString,
                    response_serializer=chat__pb2.GetContactsResponse.SerializeToString,
            ),
            'UpdateContact': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateContact,
                    request_deserializer=chat__pb2.UpdateContactRequest.FromString,
                    response_serializer=chat__pb2.UpdateContactResponse.SerializeToString,
            ),
            'BlockContact': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockContact,
                    request_deserializer=chat__pb2.BlockContactRequest.FromString,
                    response_serializer=chat__pb2.BlockContactResponse.SerializeToString,
            ),
            'ReportContact': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportContact,
                    request_deserializer=chat__pb2.ReportContactRequest.FromString,
                    response_serializer=chat__pb2.ReportContactResponse.SerializeToString,
            ),
            'SendFriendRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFriendRequest,
                    request_deserializer=chat__pb2.SendFriendRequestRequest.FromString,
                    response_serializer=chat__pb2.SendFriendRequestResponse.SerializeToString,
            ),
            'AcceptFriendRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptFriendRequest,
                    request_deserializer=chat__pb2.AcceptFriendRequestRequest.FromString,
                    response_serializer=chat__pb2.AcceptFriendRequestResponse.SerializeToString,
            ),
            'RejectFriendRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.RejectFriendRequest,
                    request_deserializer=chat__pb2.RejectFriendRequestRequest.FromString,
                    response_serializer=chat__pb2.RejectFriendRequestResponse.SerializeToString,
            ),
            'GetAllFriendIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllFriendIds,
                    request_deserializer=chat__pb2.GetAllFriendIdsRequest.FromString,
                    response_serializer=chat__pb2.GetAllFriendIdsResponse.SerializeToString,
            ),
            'GetAllFriendRequestIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllFriendRequestIds,
                    request_deserializer=chat__pb2.GetAllFriendRequestIdsRequest.FromString,
                    response_serializer=chat__pb2.GetAllFriendRequestIdsResponse.SerializeToString,
            ),
            'GetALlFriendRequestedIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetALlFriendRequestedIds,
                    request_deserializer=chat__pb2.GetALlFriendRequestedIdsRequest.FromString,
                    response_serializer=chat__pb2.GetALlFriendRequestedIdsResponse.SerializeToString,
            ),
            'GetFriendRequestStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFriendRequestStatus,
                    request_deserializer=chat__pb2.GetFriendRequestStatusRequest.FromString,
                    response_serializer=chat__pb2.GetFriendRequestStatusResponse.SerializeToString,
            ),
            'GetAllBlockedIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllBlockedIds,
                    request_deserializer=chat__pb2.GetAllBlockedIdsRequest.FromString,
                    response_serializer=chat__pb2.GetAllBlockedIdsResponse.SerializeToString,
            ),
            'FindUserByUserID': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUserByUserID,
                    request_deserializer=chat__pb2.FindUserByUserIDRequest.FromString,
                    response_serializer=chat__pb2.FindUserByUserIDResponse.SerializeToString,
            ),
            'FindUserByTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUserByTicket,
                    request_deserializer=chat__pb2.FindUserByTicketRequest.FromString,
                    response_serializer=chat__pb2.FindUserByTicketResponse.SerializeToString,
            ),
            'FindUserByEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUserByEmail,
                    request_deserializer=chat__pb2.FindUserByEmailRequest.FromString,
                    response_serializer=chat__pb2.FindUserByEmailResponse.SerializeToString,
            ),
            'UpdateProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProfile,
                    request_deserializer=chat__pb2.UpdateProfileRequest.FromString,
                    response_serializer=chat__pb2.UpdateProfileResponse.SerializeToString,
            ),
            'GetProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProfile,
                    request_deserializer=chat__pb2.GetProfileRequest.FromString,
                    response_serializer=chat__pb2.GetProfileResponse.SerializeToString,
            ),
            'UpdateSetting': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSetting,
                    request_deserializer=chat__pb2.UpdateSettingRequest.FromString,
                    response_serializer=chat__pb2.UpdateSettingResponse.SerializeToString,
            ),
            'GetSetting': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSetting,
                    request_deserializer=chat__pb2.GetSettingRequest.FromString,
                    response_serializer=chat__pb2.GetSettingResponse.SerializeToString,
            ),
            'FetchEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchEvents,
                    request_deserializer=chat__pb2.FetchEventsRequest.FromString,
                    response_serializer=chat__pb2.FetchEventsResponse.SerializeToString,
            ),
            'GetAllTags': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTags,
                    request_deserializer=chat__pb2.GetAllTagsRequest.FromString,
                    response_serializer=chat__pb2.GetAllTagsResponse.SerializeToString,
            ),
            'CreateTag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTag,
                    request_deserializer=chat__pb2.CreateTagRequest.FromString,
                    response_serializer=chat__pb2.CreateTagResponse.SerializeToString,
            ),
            'DeleteTag': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTag,
                    request_deserializer=chat__pb2.DeleteTagRequest.FromString,
                    response_serializer=chat__pb2.DeleteTagResponse.SerializeToString,
            ),
            'AddTagToContact': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTagToContact,
                    request_deserializer=chat__pb2.AddTagToContactRequest.FromString,
                    response_serializer=chat__pb2.AddTagToContactResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'talk.TalkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TalkService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/SendMessage',
            chat__pb2.SendMessageRequest.SerializeToString,
            chat__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EditMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/EditMessage',
            chat__pb2.EditMessageRequest.SerializeToString,
            chat__pb2.EditMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnsendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/UnsendMessage',
            chat__pb2.UnsendMessageRequest.SerializeToString,
            chat__pb2.UnsendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HideMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/HideMessage',
            chat__pb2.HideMessageRequest.SerializeToString,
            chat__pb2.HideMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/ReportMessage',
            chat__pb2.ReportMessageRequest.SerializeToString,
            chat__pb2.ReportMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/GetContact',
            chat__pb2.GetContactRequest.SerializeToString,
            chat__pb2.GetContactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContacts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/GetContacts',
            chat__pb2.GetContactsRequest.SerializeToString,
            chat__pb2.GetContactsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateContact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/UpdateContact',
            chat__pb2.UpdateContactRequest.SerializeToString,
            chat__pb2.UpdateContactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockContact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/BlockContact',
            chat__pb2.BlockContactRequest.SerializeToString,
            chat__pb2.BlockContactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportContact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/ReportContact',
            chat__pb2.ReportContactRequest.SerializeToString,
            chat__pb2.ReportContactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendFriendRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/SendFriendRequest',
            chat__pb2.SendFriendRequestRequest.SerializeToString,
            chat__pb2.SendFriendRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptFriendRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/AcceptFriendRequest',
            chat__pb2.AcceptFriendRequestRequest.SerializeToString,
            chat__pb2.AcceptFriendRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RejectFriendRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/RejectFriendRequest',
            chat__pb2.RejectFriendRequestRequest.SerializeToString,
            chat__pb2.RejectFriendRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllFriendIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/GetAllFriendIds',
            chat__pb2.GetAllFriendIdsRequest.SerializeToString,
            chat__pb2.GetAllFriendIdsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllFriendRequestIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/GetAllFriendRequestIds',
            chat__pb2.GetAllFriendRequestIdsRequest.SerializeToString,
            chat__pb2.GetAllFriendRequestIdsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetALlFriendRequestedIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/GetALlFriendRequestedIds',
            chat__pb2.GetALlFriendRequestedIdsRequest.SerializeToString,
            chat__pb2.GetALlFriendRequestedIdsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFriendRequestStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/GetFriendRequestStatus',
            chat__pb2.GetFriendRequestStatusRequest.SerializeToString,
            chat__pb2.GetFriendRequestStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllBlockedIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/GetAllBlockedIds',
            chat__pb2.GetAllBlockedIdsRequest.SerializeToString,
            chat__pb2.GetAllBlockedIdsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindUserByUserID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/FindUserByUserID',
            chat__pb2.FindUserByUserIDRequest.SerializeToString,
            chat__pb2.FindUserByUserIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindUserByTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/FindUserByTicket',
            chat__pb2.FindUserByTicketRequest.SerializeToString,
            chat__pb2.FindUserByTicketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindUserByEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/FindUserByEmail',
            chat__pb2.FindUserByEmailRequest.SerializeToString,
            chat__pb2.FindUserByEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/UpdateProfile',
            chat__pb2.UpdateProfileRequest.SerializeToString,
            chat__pb2.UpdateProfileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/GetProfile',
            chat__pb2.GetProfileRequest.SerializeToString,
            chat__pb2.GetProfileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSetting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/UpdateSetting',
            chat__pb2.UpdateSettingRequest.SerializeToString,
            chat__pb2.UpdateSettingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSetting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/GetSetting',
            chat__pb2.GetSettingRequest.SerializeToString,
            chat__pb2.GetSettingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/talk.TalkService/FetchEvents',
            chat__pb2.FetchEventsRequest.SerializeToString,
            chat__pb2.FetchEventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/GetAllTags',
            chat__pb2.GetAllTagsRequest.SerializeToString,
            chat__pb2.GetAllTagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/CreateTag',
            chat__pb2.CreateTagRequest.SerializeToString,
            chat__pb2.CreateTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/DeleteTag',
            chat__pb2.DeleteTagRequest.SerializeToString,
            chat__pb2.DeleteTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTagToContact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.TalkService/AddTagToContact',
            chat__pb2.AddTagToContactRequest.SerializeToString,
            chat__pb2.AddTagToContactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerifyIDToken = channel.unary_unary(
                '/talk.AuthService/VerifyIDToken',
                request_serializer=chat__pb2.VerifyIDTokenRequest.SerializeToString,
                response_deserializer=chat__pb2.VerifyIDTokenResponse.FromString,
                )
        self.InitPrimaryAccount = channel.unary_unary(
                '/talk.AuthService/InitPrimaryAccount',
                request_serializer=chat__pb2.InitPrimaryAccountRequest.SerializeToString,
                response_deserializer=chat__pb2.InitPrimaryAccountResponse.FromString,
                )


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VerifyIDToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitPrimaryAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VerifyIDToken': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyIDToken,
                    request_deserializer=chat__pb2.VerifyIDTokenRequest.FromString,
                    response_serializer=chat__pb2.VerifyIDTokenResponse.SerializeToString,
            ),
            'InitPrimaryAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.InitPrimaryAccount,
                    request_deserializer=chat__pb2.InitPrimaryAccountRequest.FromString,
                    response_serializer=chat__pb2.InitPrimaryAccountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'talk.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VerifyIDToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.AuthService/VerifyIDToken',
            chat__pb2.VerifyIDTokenRequest.SerializeToString,
            chat__pb2.VerifyIDTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitPrimaryAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/talk.AuthService/InitPrimaryAccount',
            chat__pb2.InitPrimaryAccountRequest.SerializeToString,
            chat__pb2.InitPrimaryAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
