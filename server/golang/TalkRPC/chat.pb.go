// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: chat.proto

package TalkRPC

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EventType int32

const (
	EventType_RECEIVE_MESSAGE EventType = 0
	EventType_SEND_MESSAGE    EventType = 1
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "RECEIVE_MESSAGE",
		1: "SEND_MESSAGE",
	}
	EventType_value = map[string]int32{
		"RECEIVE_MESSAGE": 0,
		"SEND_MESSAGE":    1,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

type SettingKey int32

const (
	SettingKey_PRIVATE_USER_ID                 SettingKey = 0
	SettingKey_ALLOW_SEARCH_BY_PRIVATE_USER_ID SettingKey = 1
	SettingKey_EMAIL                           SettingKey = 2
	SettingKey_ALLOW_SEARCH_BY_EMAIL           SettingKey = 3
	SettingKey_USER_TICKET                     SettingKey = 4
	SettingKey_ALLOW_SEARCH_BY_USER_TICKET     SettingKey = 5
)

// Enum value maps for SettingKey.
var (
	SettingKey_name = map[int32]string{
		0: "PRIVATE_USER_ID",
		1: "ALLOW_SEARCH_BY_PRIVATE_USER_ID",
		2: "EMAIL",
		3: "ALLOW_SEARCH_BY_EMAIL",
		4: "USER_TICKET",
		5: "ALLOW_SEARCH_BY_USER_TICKET",
	}
	SettingKey_value = map[string]int32{
		"PRIVATE_USER_ID":                 0,
		"ALLOW_SEARCH_BY_PRIVATE_USER_ID": 1,
		"EMAIL":                           2,
		"ALLOW_SEARCH_BY_EMAIL":           3,
		"USER_TICKET":                     4,
		"ALLOW_SEARCH_BY_USER_TICKET":     5,
	}
)

func (x SettingKey) Enum() *SettingKey {
	p := new(SettingKey)
	*p = x
	return p
}

func (x SettingKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettingKey) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[1].Descriptor()
}

func (SettingKey) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[1]
}

func (x SettingKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettingKey.Descriptor instead.
func (SettingKey) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

type ProfileKey int32

const (
	ProfileKey_NAME ProfileKey = 0
	ProfileKey_BIO  ProfileKey = 1
)

// Enum value maps for ProfileKey.
var (
	ProfileKey_name = map[int32]string{
		0: "NAME",
		1: "BIO",
	}
	ProfileKey_value = map[string]int32{
		"NAME": 0,
		"BIO":  1,
	}
)

func (x ProfileKey) Enum() *ProfileKey {
	p := new(ProfileKey)
	*p = x
	return p
}

func (x ProfileKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileKey) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[2].Descriptor()
}

func (ProfileKey) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[2]
}

func (x ProfileKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileKey.Descriptor instead.
func (ProfileKey) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

type ContactKey int32

const (
	ContactKey_OVER_WRITTEN_NAME ContactKey = 0
)

// Enum value maps for ContactKey.
var (
	ContactKey_name = map[int32]string{
		0: "OVER_WRITTEN_NAME",
	}
	ContactKey_value = map[string]int32{
		"OVER_WRITTEN_NAME": 0,
	}
)

func (x ContactKey) Enum() *ContactKey {
	p := new(ContactKey)
	*p = x
	return p
}

func (x ContactKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactKey) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[3].Descriptor()
}

func (ContactKey) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[3]
}

func (x ContactKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactKey.Descriptor instead.
func (ContactKey) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

type MessageType int32

const (
	MessageType_TEXT    MessageType = 0
	MessageType_IMAGE   MessageType = 1
	MessageType_VIDEO   MessageType = 2
	MessageType_STICKER MessageType = 3
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "TEXT",
		1: "IMAGE",
		2: "VIDEO",
		3: "STICKER",
	}
	MessageType_value = map[string]int32{
		"TEXT":    0,
		"IMAGE":   1,
		"VIDEO":   2,
		"STICKER": 3,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[4].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[4]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

type ToType int32

const (
	ToType_USER  ToType = 0
	ToType_GROUP ToType = 1
	ToType_ROOM  ToType = 2
)

// Enum value maps for ToType.
var (
	ToType_name = map[int32]string{
		0: "USER",
		1: "GROUP",
		2: "ROOM",
	}
	ToType_value = map[string]int32{
		"USER":  0,
		"GROUP": 1,
		"ROOM":  2,
	}
)

func (x ToType) Enum() *ToType {
	p := new(ToType)
	*p = x
	return p
}

func (x ToType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[5].Descriptor()
}

func (ToType) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[5]
}

func (x ToType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToType.Descriptor instead.
func (ToType) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

type FriendStatus int32

const (
	FriendStatus_friend  FriendStatus = 0
	FriendStatus_block   FriendStatus = 1
	FriendStatus_delete  FriendStatus = 2
	FriendStatus_nothing FriendStatus = 3
)

// Enum value maps for FriendStatus.
var (
	FriendStatus_name = map[int32]string{
		0: "friend",
		1: "block",
		2: "delete",
		3: "nothing",
	}
	FriendStatus_value = map[string]int32{
		"friend":  0,
		"block":   1,
		"delete":  2,
		"nothing": 3,
	}
)

func (x FriendStatus) Enum() *FriendStatus {
	p := new(FriendStatus)
	*p = x
	return p
}

func (x FriendStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[6].Descriptor()
}

func (FriendStatus) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[6]
}

func (x FriendStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendStatus.Descriptor instead.
func (FriendStatus) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

type FetchEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *FetchEventsRequest) Reset() {
	*x = FetchEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchEventsRequest) ProtoMessage() {}

func (x *FetchEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchEventsRequest.ProtoReflect.Descriptor instead.
func (*FetchEventsRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *FetchEventsRequest) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type FetchEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events    []*Event  `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	EventType EventType `protobuf:"varint,2,opt,name=eventType,proto3,enum=talk.EventType" json:"eventType,omitempty"`
}

func (x *FetchEventsResponse) Reset() {
	*x = FetchEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchEventsResponse) ProtoMessage() {}

func (x *FetchEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchEventsResponse.ProtoReflect.Descriptor instead.
func (*FetchEventsResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *FetchEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *FetchEventsResponse) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_RECEIVE_MESSAGE
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   int64    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Event) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type GetSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSettingRequest) Reset() {
	*x = GetSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingRequest) ProtoMessage() {}

func (x *GetSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingRequest.ProtoReflect.Descriptor instead.
func (*GetSettingRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

type GetSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *Setting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *GetSettingResponse) Reset() {
	*x = GetSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingResponse) ProtoMessage() {}

func (x *GetSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingResponse.ProtoReflect.Descriptor instead.
func (*GetSettingResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *GetSettingResponse) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type UpdateSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys    []SettingKey `protobuf:"varint,1,rep,packed,name=keys,proto3,enum=talk.SettingKey" json:"keys,omitempty"`
	Setting *Setting     `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *UpdateSettingRequest) Reset() {
	*x = UpdateSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingRequest) ProtoMessage() {}

func (x *UpdateSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateSettingRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSettingRequest) GetKeys() []SettingKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *UpdateSettingRequest) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type UpdateSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *Setting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *UpdateSettingResponse) Reset() {
	*x = UpdateSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingResponse) ProtoMessage() {}

func (x *UpdateSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateSettingResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateSettingResponse) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateUserID              string `protobuf:"bytes,1,opt,name=privateUserID,proto3" json:"privateUserID,omitempty"`
	AllowSearchByPrivateUserID bool   `protobuf:"varint,2,opt,name=allowSearchByPrivateUserID,proto3" json:"allowSearchByPrivateUserID,omitempty"`
	Email                      string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	AllowSearchByEmail         bool   `protobuf:"varint,4,opt,name=allowSearchByEmail,proto3" json:"allowSearchByEmail,omitempty"`
	UserTicket                 string `protobuf:"bytes,5,opt,name=userTicket,proto3" json:"userTicket,omitempty"`
	AllowSearchByUserTicket    bool   `protobuf:"varint,6,opt,name=allowSearchByUserTicket,proto3" json:"allowSearchByUserTicket,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{7}
}

func (x *Setting) GetPrivateUserID() string {
	if x != nil {
		return x.PrivateUserID
	}
	return ""
}

func (x *Setting) GetAllowSearchByPrivateUserID() bool {
	if x != nil {
		return x.AllowSearchByPrivateUserID
	}
	return false
}

func (x *Setting) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Setting) GetAllowSearchByEmail() bool {
	if x != nil {
		return x.AllowSearchByEmail
	}
	return false
}

func (x *Setting) GetUserTicket() string {
	if x != nil {
		return x.UserTicket
	}
	return ""
}

func (x *Setting) GetAllowSearchByUserTicket() bool {
	if x != nil {
		return x.AllowSearchByUserTicket
	}
	return false
}

type GetProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProfileRequest) Reset() {
	*x = GetProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileRequest) ProtoMessage() {}

func (x *GetProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileRequest.ProtoReflect.Descriptor instead.
func (*GetProfileRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{8}
}

type GetProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *GetProfileResponse) Reset() {
	*x = GetProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileResponse) ProtoMessage() {}

func (x *GetProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileResponse.ProtoReflect.Descriptor instead.
func (*GetProfileResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{9}
}

func (x *GetProfileResponse) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type UpdateProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys    []ProfileKey `protobuf:"varint,1,rep,packed,name=keys,proto3,enum=talk.ProfileKey" json:"keys,omitempty"`
	Profile *Profile     `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *UpdateProfileRequest) Reset() {
	*x = UpdateProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileRequest) ProtoMessage() {}

func (x *UpdateProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateProfileRequest) GetKeys() []ProfileKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *UpdateProfileRequest) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type UpdateProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProfileResponse) Reset() {
	*x = UpdateProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileResponse) ProtoMessage() {}

func (x *UpdateProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileResponse.ProtoReflect.Descriptor instead.
func (*UpdateProfileResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{11}
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bio         string `protobuf:"bytes,3,opt,name=bio,proto3" json:"bio,omitempty"`
	IconPath    string `protobuf:"bytes,11,opt,name=iconPath,proto3" json:"iconPath,omitempty"`
	CoverPath   string `protobuf:"bytes,12,opt,name=coverPath,proto3" json:"coverPath,omitempty"`
	TwitterID   string `protobuf:"bytes,13,opt,name=twitterID,proto3" json:"twitterID,omitempty"`
	InstagramID string `protobuf:"bytes,14,opt,name=instagramID,proto3" json:"instagramID,omitempty"`
	GithubID    string `protobuf:"bytes,15,opt,name=githubID,proto3" json:"githubID,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{12}
}

func (x *Profile) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Profile) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *Profile) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *Profile) GetCoverPath() string {
	if x != nil {
		return x.CoverPath
	}
	return ""
}

func (x *Profile) GetTwitterID() string {
	if x != nil {
		return x.TwitterID
	}
	return ""
}

func (x *Profile) GetInstagramID() string {
	if x != nil {
		return x.InstagramID
	}
	return ""
}

func (x *Profile) GetGithubID() string {
	if x != nil {
		return x.GithubID
	}
	return ""
}

type FindUserByEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *FindUserByEmailRequest) Reset() {
	*x = FindUserByEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserByEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByEmailRequest) ProtoMessage() {}

func (x *FindUserByEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByEmailRequest.ProtoReflect.Descriptor instead.
func (*FindUserByEmailRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{13}
}

func (x *FindUserByEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type FindUserByEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *FindUserByEmailResponse) Reset() {
	*x = FindUserByEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserByEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByEmailResponse) ProtoMessage() {}

func (x *FindUserByEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByEmailResponse.ProtoReflect.Descriptor instead.
func (*FindUserByEmailResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{14}
}

func (x *FindUserByEmailResponse) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type FindUserByTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket string `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *FindUserByTicketRequest) Reset() {
	*x = FindUserByTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserByTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByTicketRequest) ProtoMessage() {}

func (x *FindUserByTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByTicketRequest.ProtoReflect.Descriptor instead.
func (*FindUserByTicketRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{15}
}

func (x *FindUserByTicketRequest) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

type FindUserByTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *FindUserByTicketResponse) Reset() {
	*x = FindUserByTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserByTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByTicketResponse) ProtoMessage() {}

func (x *FindUserByTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByTicketResponse.ProtoReflect.Descriptor instead.
func (*FindUserByTicketResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{16}
}

func (x *FindUserByTicketResponse) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type FindUserByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateUserID string `protobuf:"bytes,1,opt,name=privateUserID,proto3" json:"privateUserID,omitempty"`
}

func (x *FindUserByUserIDRequest) Reset() {
	*x = FindUserByUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByUserIDRequest) ProtoMessage() {}

func (x *FindUserByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByUserIDRequest.ProtoReflect.Descriptor instead.
func (*FindUserByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{17}
}

func (x *FindUserByUserIDRequest) GetPrivateUserID() string {
	if x != nil {
		return x.PrivateUserID
	}
	return ""
}

type FindUserByUserIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *FindUserByUserIDResponse) Reset() {
	*x = FindUserByUserIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserByUserIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByUserIDResponse) ProtoMessage() {}

func (x *FindUserByUserIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByUserIDResponse.ProtoReflect.Descriptor instead.
func (*FindUserByUserIDResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{18}
}

func (x *FindUserByUserIDResponse) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type GetAllBlockedIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllBlockedIdsRequest) Reset() {
	*x = GetAllBlockedIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBlockedIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBlockedIdsRequest) ProtoMessage() {}

func (x *GetAllBlockedIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBlockedIdsRequest.ProtoReflect.Descriptor instead.
func (*GetAllBlockedIdsRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{19}
}

type GetAllBlockedIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUIDs []string `protobuf:"bytes,1,rep,name=UUIDs,proto3" json:"UUIDs,omitempty"`
}

func (x *GetAllBlockedIdsResponse) Reset() {
	*x = GetAllBlockedIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBlockedIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBlockedIdsResponse) ProtoMessage() {}

func (x *GetAllBlockedIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBlockedIdsResponse.ProtoReflect.Descriptor instead.
func (*GetAllBlockedIdsResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{20}
}

func (x *GetAllBlockedIdsResponse) GetUUIDs() []string {
	if x != nil {
		return x.UUIDs
	}
	return nil
}

type GetFriendRequestStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUIDs []string `protobuf:"bytes,1,rep,name=UUIDs,proto3" json:"UUIDs,omitempty"`
}

func (x *GetFriendRequestStatusRequest) Reset() {
	*x = GetFriendRequestStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendRequestStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendRequestStatusRequest) ProtoMessage() {}

func (x *GetFriendRequestStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendRequestStatusRequest.ProtoReflect.Descriptor instead.
func (*GetFriendRequestStatusRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{21}
}

func (x *GetFriendRequestStatusRequest) GetUUIDs() []string {
	if x != nil {
		return x.UUIDs
	}
	return nil
}

type GetFriendRequestStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*FriendRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *GetFriendRequestStatusResponse) Reset() {
	*x = GetFriendRequestStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendRequestStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendRequestStatusResponse) ProtoMessage() {}

func (x *GetFriendRequestStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendRequestStatusResponse.ProtoReflect.Descriptor instead.
func (*GetFriendRequestStatusResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{22}
}

func (x *GetFriendRequestStatusResponse) GetRequests() []*FriendRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type GetALlFriendRequestedIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetALlFriendRequestedIdsRequest) Reset() {
	*x = GetALlFriendRequestedIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetALlFriendRequestedIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetALlFriendRequestedIdsRequest) ProtoMessage() {}

func (x *GetALlFriendRequestedIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetALlFriendRequestedIdsRequest.ProtoReflect.Descriptor instead.
func (*GetALlFriendRequestedIdsRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{23}
}

type GetALlFriendRequestedIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*FriendRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *GetALlFriendRequestedIdsResponse) Reset() {
	*x = GetALlFriendRequestedIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetALlFriendRequestedIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetALlFriendRequestedIdsResponse) ProtoMessage() {}

func (x *GetALlFriendRequestedIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetALlFriendRequestedIdsResponse.ProtoReflect.Descriptor instead.
func (*GetALlFriendRequestedIdsResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{24}
}

func (x *GetALlFriendRequestedIdsResponse) GetRequests() []*FriendRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type GetAllFriendRequestIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllFriendRequestIdsRequest) Reset() {
	*x = GetAllFriendRequestIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllFriendRequestIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllFriendRequestIdsRequest) ProtoMessage() {}

func (x *GetAllFriendRequestIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllFriendRequestIdsRequest.ProtoReflect.Descriptor instead.
func (*GetAllFriendRequestIdsRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{25}
}

type GetAllFriendRequestIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*FriendRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *GetAllFriendRequestIdsResponse) Reset() {
	*x = GetAllFriendRequestIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllFriendRequestIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllFriendRequestIdsResponse) ProtoMessage() {}

func (x *GetAllFriendRequestIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllFriendRequestIdsResponse.ProtoReflect.Descriptor instead.
func (*GetAllFriendRequestIdsResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{26}
}

func (x *GetAllFriendRequestIdsResponse) GetRequests() []*FriendRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type GetAllFriendIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllFriendIdsRequest) Reset() {
	*x = GetAllFriendIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllFriendIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllFriendIdsRequest) ProtoMessage() {}

func (x *GetAllFriendIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllFriendIdsRequest.ProtoReflect.Descriptor instead.
func (*GetAllFriendIdsRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{27}
}

type GetAllFriendIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetAllFriendIdsResponse) Reset() {
	*x = GetAllFriendIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllFriendIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllFriendIdsResponse) ProtoMessage() {}

func (x *GetAllFriendIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllFriendIdsResponse.ProtoReflect.Descriptor instead.
func (*GetAllFriendIdsResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{28}
}

func (x *GetAllFriendIdsResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type RejectFriendRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *FriendRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *RejectFriendRequestRequest) Reset() {
	*x = RejectFriendRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectFriendRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectFriendRequestRequest) ProtoMessage() {}

func (x *RejectFriendRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectFriendRequestRequest.ProtoReflect.Descriptor instead.
func (*RejectFriendRequestRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{29}
}

func (x *RejectFriendRequestRequest) GetRequest() *FriendRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type RejectFriendRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *RejectFriendRequestResponse) Reset() {
	*x = RejectFriendRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectFriendRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectFriendRequestResponse) ProtoMessage() {}

func (x *RejectFriendRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectFriendRequestResponse.ProtoReflect.Descriptor instead.
func (*RejectFriendRequestResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{30}
}

func (x *RejectFriendRequestResponse) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type AcceptFriendRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *FriendRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *AcceptFriendRequestRequest) Reset() {
	*x = AcceptFriendRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptFriendRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptFriendRequestRequest) ProtoMessage() {}

func (x *AcceptFriendRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptFriendRequestRequest.ProtoReflect.Descriptor instead.
func (*AcceptFriendRequestRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{31}
}

func (x *AcceptFriendRequestRequest) GetRequest() *FriendRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type AcceptFriendRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *AcceptFriendRequestResponse) Reset() {
	*x = AcceptFriendRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptFriendRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptFriendRequestResponse) ProtoMessage() {}

func (x *AcceptFriendRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptFriendRequestResponse.ProtoReflect.Descriptor instead.
func (*AcceptFriendRequestResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{32}
}

func (x *AcceptFriendRequestResponse) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type SendFriendRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *FriendRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *SendFriendRequestRequest) Reset() {
	*x = SendFriendRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFriendRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFriendRequestRequest) ProtoMessage() {}

func (x *SendFriendRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFriendRequestRequest.ProtoReflect.Descriptor instead.
func (*SendFriendRequestRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{33}
}

func (x *SendFriendRequestRequest) GetRequest() *FriendRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type SendFriendRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *SendFriendRequestResponse) Reset() {
	*x = SendFriendRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFriendRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFriendRequestResponse) ProtoMessage() {}

func (x *SendFriendRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFriendRequestResponse.ProtoReflect.Descriptor instead.
func (*SendFriendRequestResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{34}
}

func (x *SendFriendRequestResponse) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type FriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromID               string `protobuf:"bytes,1,opt,name=fromID,proto3" json:"fromID,omitempty"`
	ToID                 string `protobuf:"bytes,2,opt,name=toID,proto3" json:"toID,omitempty"`
	CreatedTIme          int64  `protobuf:"varint,3,opt,name=createdTIme,proto3" json:"createdTIme,omitempty"`
	MetaData             string `protobuf:"bytes,4,opt,name=metaData,proto3" json:"metaData,omitempty"`
	IsAccepted           bool   `protobuf:"varint,5,opt,name=isAccepted,proto3" json:"isAccepted,omitempty"`
	IsRejected           bool   `protobuf:"varint,6,opt,name=isRejected,proto3" json:"isRejected,omitempty"`
	AcceptedOrRejectedAt int64  `protobuf:"varint,7,opt,name=acceptedOrRejectedAt,proto3" json:"acceptedOrRejectedAt,omitempty"`
}

func (x *FriendRequest) Reset() {
	*x = FriendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendRequest) ProtoMessage() {}

func (x *FriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendRequest.ProtoReflect.Descriptor instead.
func (*FriendRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{35}
}

func (x *FriendRequest) GetFromID() string {
	if x != nil {
		return x.FromID
	}
	return ""
}

func (x *FriendRequest) GetToID() string {
	if x != nil {
		return x.ToID
	}
	return ""
}

func (x *FriendRequest) GetCreatedTIme() int64 {
	if x != nil {
		return x.CreatedTIme
	}
	return 0
}

func (x *FriendRequest) GetMetaData() string {
	if x != nil {
		return x.MetaData
	}
	return ""
}

func (x *FriendRequest) GetIsAccepted() bool {
	if x != nil {
		return x.IsAccepted
	}
	return false
}

func (x *FriendRequest) GetIsRejected() bool {
	if x != nil {
		return x.IsRejected
	}
	return false
}

func (x *FriendRequest) GetAcceptedOrRejectedAt() int64 {
	if x != nil {
		return x.AcceptedOrRejectedAt
	}
	return 0
}

type ReportContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID     string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	MetaData string `protobuf:"bytes,3,opt,name=metaData,proto3" json:"metaData,omitempty"`
}

func (x *ReportContactRequest) Reset() {
	*x = ReportContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportContactRequest) ProtoMessage() {}

func (x *ReportContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportContactRequest.ProtoReflect.Descriptor instead.
func (*ReportContactRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{36}
}

func (x *ReportContactRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ReportContactRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ReportContactRequest) GetMetaData() string {
	if x != nil {
		return x.MetaData
	}
	return ""
}

type ReportContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportContactResponse) Reset() {
	*x = ReportContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportContactResponse) ProtoMessage() {}

func (x *ReportContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportContactResponse.ProtoReflect.Descriptor instead.
func (*ReportContactResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{37}
}

type BlockContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *BlockContactRequest) Reset() {
	*x = BlockContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContactRequest) ProtoMessage() {}

func (x *BlockContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContactRequest.ProtoReflect.Descriptor instead.
func (*BlockContactRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{38}
}

func (x *BlockContactRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type BlockContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlockContactResponse) Reset() {
	*x = BlockContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContactResponse) ProtoMessage() {}

func (x *BlockContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContactResponse.ProtoReflect.Descriptor instead.
func (*BlockContactResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{39}
}

type UpdateContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     []ContactKey `protobuf:"varint,1,rep,packed,name=key,proto3,enum=talk.ContactKey" json:"key,omitempty"`
	Contact *Contact     `protobuf:"bytes,2,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *UpdateContactRequest) Reset() {
	*x = UpdateContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContactRequest) ProtoMessage() {}

func (x *UpdateContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContactRequest.ProtoReflect.Descriptor instead.
func (*UpdateContactRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateContactRequest) GetKey() []ContactKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *UpdateContactRequest) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type UpdateContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *UpdateContactResponse) Reset() {
	*x = UpdateContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContactResponse) ProtoMessage() {}

func (x *UpdateContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContactResponse.ProtoReflect.Descriptor instead.
func (*UpdateContactResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateContactResponse) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type GetContactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUIDs []string `protobuf:"bytes,1,rep,name=UUIDs,proto3" json:"UUIDs,omitempty"`
}

func (x *GetContactsRequest) Reset() {
	*x = GetContactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsRequest) ProtoMessage() {}

func (x *GetContactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsRequest.ProtoReflect.Descriptor instead.
func (*GetContactsRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{42}
}

func (x *GetContactsRequest) GetUUIDs() []string {
	if x != nil {
		return x.UUIDs
	}
	return nil
}

type GetContactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contacts []*Contact `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *GetContactsResponse) Reset() {
	*x = GetContactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactsResponse) ProtoMessage() {}

func (x *GetContactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactsResponse.ProtoReflect.Descriptor instead.
func (*GetContactsResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{43}
}

func (x *GetContactsResponse) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

type ReportMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID int64  `protobuf:"varint,1,opt,name=messageID,proto3" json:"messageID,omitempty"`
	Reason    string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ReportMessageRequest) Reset() {
	*x = ReportMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessageRequest) ProtoMessage() {}

func (x *ReportMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessageRequest.ProtoReflect.Descriptor instead.
func (*ReportMessageRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{44}
}

func (x *ReportMessageRequest) GetMessageID() int64 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *ReportMessageRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ReportMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportMessageResponse) Reset() {
	*x = ReportMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportMessageResponse) ProtoMessage() {}

func (x *ReportMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportMessageResponse.ProtoReflect.Descriptor instead.
func (*ReportMessageResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{45}
}

type HideMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID int64 `protobuf:"varint,1,opt,name=messageID,proto3" json:"messageID,omitempty"`
}

func (x *HideMessageRequest) Reset() {
	*x = HideMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideMessageRequest) ProtoMessage() {}

func (x *HideMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideMessageRequest.ProtoReflect.Descriptor instead.
func (*HideMessageRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{46}
}

func (x *HideMessageRequest) GetMessageID() int64 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

type HideMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HideMessageResponse) Reset() {
	*x = HideMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideMessageResponse) ProtoMessage() {}

func (x *HideMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideMessageResponse.ProtoReflect.Descriptor instead.
func (*HideMessageResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{47}
}

type UnsendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID string `protobuf:"bytes,1,opt,name=messageID,proto3" json:"messageID,omitempty"`
}

func (x *UnsendMessageRequest) Reset() {
	*x = UnsendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsendMessageRequest) ProtoMessage() {}

func (x *UnsendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsendMessageRequest.ProtoReflect.Descriptor instead.
func (*UnsendMessageRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{48}
}

func (x *UnsendMessageRequest) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

type UnsendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnsendMessageResponse) Reset() {
	*x = UnsendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsendMessageResponse) ProtoMessage() {}

func (x *UnsendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsendMessageResponse.ProtoReflect.Descriptor instead.
func (*UnsendMessageResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{49}
}

type EditMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EditMessageRequest) Reset() {
	*x = EditMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMessageRequest) ProtoMessage() {}

func (x *EditMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMessageRequest.ProtoReflect.Descriptor instead.
func (*EditMessageRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{50}
}

func (x *EditMessageRequest) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type EditMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EditMessageResponse) Reset() {
	*x = EditMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMessageResponse) ProtoMessage() {}

func (x *EditMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMessageResponse.ProtoReflect.Descriptor instead.
func (*EditMessageResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{51}
}

func (x *EditMessageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{52}
}

func (x *SendMessageRequest) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{53}
}

func (x *SendMessageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string      `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	FromID    string      `protobuf:"bytes,2,opt,name=fromID,proto3" json:"fromID,omitempty"`
	ToID      string      `protobuf:"bytes,3,opt,name=toID,proto3" json:"toID,omitempty"`
	ToType    ToType      `protobuf:"varint,7,opt,name=toType,proto3,enum=talk.ToType" json:"toType,omitempty"`
	MsgType   MessageType `protobuf:"varint,8,opt,name=msgType,proto3,enum=talk.MessageType" json:"msgType,omitempty"`
	MessageID int64       `protobuf:"varint,10,opt,name=messageID,proto3" json:"messageID,omitempty"`
	ReadCount int64       `protobuf:"varint,11,opt,name=readCount,proto3" json:"readCount,omitempty"`
	Readers   []*Reader   `protobuf:"bytes,12,rep,name=readers,proto3" json:"readers,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{54}
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Message) GetFromID() string {
	if x != nil {
		return x.FromID
	}
	return ""
}

func (x *Message) GetToID() string {
	if x != nil {
		return x.ToID
	}
	return ""
}

func (x *Message) GetToType() ToType {
	if x != nil {
		return x.ToType
	}
	return ToType_USER
}

func (x *Message) GetMsgType() MessageType {
	if x != nil {
		return x.MsgType
	}
	return MessageType_TEXT
}

func (x *Message) GetMessageID() int64 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *Message) GetReadCount() int64 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *Message) GetReaders() []*Reader {
	if x != nil {
		return x.Readers
	}
	return nil
}

type Reader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID      string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Index     int64  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	ReadTime  int64  `protobuf:"varint,3,opt,name=readTime,proto3" json:"readTime,omitempty"`
	MessageID int64  `protobuf:"varint,4,opt,name=messageID,proto3" json:"messageID,omitempty"`
}

func (x *Reader) Reset() {
	*x = Reader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reader) ProtoMessage() {}

func (x *Reader) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reader.ProtoReflect.Descriptor instead.
func (*Reader) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{55}
}

func (x *Reader) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Reader) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Reader) GetReadTime() int64 {
	if x != nil {
		return x.ReadTime
	}
	return 0
}

func (x *Reader) GetMessageID() int64 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

type GetContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *GetContactRequest) Reset() {
	*x = GetContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactRequest) ProtoMessage() {}

func (x *GetContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactRequest.ProtoReflect.Descriptor instead.
func (*GetContactRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{56}
}

func (x *GetContactRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type GetContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *Contact `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *GetContactResponse) Reset() {
	*x = GetContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContactResponse) ProtoMessage() {}

func (x *GetContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContactResponse.ProtoReflect.Descriptor instead.
func (*GetContactResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{57}
}

func (x *GetContactResponse) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID            string       `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name            string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OverWrittenName string       `protobuf:"bytes,3,opt,name=overWrittenName,proto3" json:"overWrittenName,omitempty"`
	MetaData        string       `protobuf:"bytes,4,opt,name=metaData,proto3" json:"metaData,omitempty"`
	Status          FriendStatus `protobuf:"varint,5,opt,name=status,proto3,enum=talk.FriendStatus" json:"status,omitempty"`
	TagIds          []string     `protobuf:"bytes,8,rep,name=tagIds,proto3" json:"tagIds,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{58}
}

func (x *Contact) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Contact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contact) GetOverWrittenName() string {
	if x != nil {
		return x.OverWrittenName
	}
	return ""
}

func (x *Contact) GetMetaData() string {
	if x != nil {
		return x.MetaData
	}
	return ""
}

func (x *Contact) GetStatus() FriendStatus {
	if x != nil {
		return x.Status
	}
	return FriendStatus_friend
}

func (x *Contact) GetTagIds() []string {
	if x != nil {
		return x.TagIds
	}
	return nil
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagID       string `protobuf:"bytes,1,opt,name=tagID,proto3" json:"tagID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Color       string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	CreatorUUID string `protobuf:"bytes,5,opt,name=creatorUUID,proto3" json:"creatorUUID,omitempty"`
	CreatedTime int64  `protobuf:"varint,6,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{59}
}

func (x *Tag) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tag) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Tag) GetCreatorUUID() string {
	if x != nil {
		return x.CreatorUUID
	}
	return ""
}

func (x *Tag) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type GetAllTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllTagsRequest) Reset() {
	*x = GetAllTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTagsRequest) ProtoMessage() {}

func (x *GetAllTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTagsRequest.ProtoReflect.Descriptor instead.
func (*GetAllTagsRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{60}
}

type GetAllTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GetAllTagsResponse) Reset() {
	*x = GetAllTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTagsResponse) ProtoMessage() {}

func (x *GetAllTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTagsResponse.ProtoReflect.Descriptor instead.
func (*GetAllTagsResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{61}
}

func (x *GetAllTagsResponse) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag *Tag `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *CreateTagRequest) Reset() {
	*x = CreateTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagRequest) ProtoMessage() {}

func (x *CreateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagRequest.ProtoReflect.Descriptor instead.
func (*CreateTagRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{62}
}

func (x *CreateTagRequest) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type CreateTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTagResponse) Reset() {
	*x = CreateTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagResponse) ProtoMessage() {}

func (x *CreateTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagResponse.ProtoReflect.Descriptor instead.
func (*CreateTagResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{63}
}

type DeleteTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagID string `protobuf:"bytes,1,opt,name=tagID,proto3" json:"tagID,omitempty"`
}

func (x *DeleteTagRequest) Reset() {
	*x = DeleteTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagRequest) ProtoMessage() {}

func (x *DeleteTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteTagRequest) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

type DeleteTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagResponse) Reset() {
	*x = DeleteTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResponse) ProtoMessage() {}

func (x *DeleteTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResponse.ProtoReflect.Descriptor instead.
func (*DeleteTagResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{65}
}

type AddTagToContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUUID string `protobuf:"bytes,1,opt,name=targetUUID,proto3" json:"targetUUID,omitempty"`
	TagID      string `protobuf:"bytes,2,opt,name=TagID,proto3" json:"TagID,omitempty"`
}

func (x *AddTagToContactRequest) Reset() {
	*x = AddTagToContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagToContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagToContactRequest) ProtoMessage() {}

func (x *AddTagToContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagToContactRequest.ProtoReflect.Descriptor instead.
func (*AddTagToContactRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{66}
}

func (x *AddTagToContactRequest) GetTargetUUID() string {
	if x != nil {
		return x.TargetUUID
	}
	return ""
}

func (x *AddTagToContactRequest) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

type AddTagToContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTagToContactResponse) Reset() {
	*x = AddTagToContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagToContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagToContactResponse) ProtoMessage() {}

func (x *AddTagToContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagToContactResponse.ProtoReflect.Descriptor instead.
func (*AddTagToContactResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{67}
}

type VerifyIDTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JwtToken string `protobuf:"bytes,1,opt,name=jwtToken,proto3" json:"jwtToken,omitempty"`
}

func (x *VerifyIDTokenRequest) Reset() {
	*x = VerifyIDTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyIDTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyIDTokenRequest) ProtoMessage() {}

func (x *VerifyIDTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyIDTokenRequest.ProtoReflect.Descriptor instead.
func (*VerifyIDTokenRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{68}
}

func (x *VerifyIDTokenRequest) GetJwtToken() string {
	if x != nil {
		return x.JwtToken
	}
	return ""
}

type VerifyIDTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyIDTokenResponse) Reset() {
	*x = VerifyIDTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyIDTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyIDTokenResponse) ProtoMessage() {}

func (x *VerifyIDTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyIDTokenResponse.ProtoReflect.Descriptor instead.
func (*VerifyIDTokenResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{69}
}

type InitPrimaryAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitPrimaryAccountRequest) Reset() {
	*x = InitPrimaryAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPrimaryAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPrimaryAccountRequest) ProtoMessage() {}

func (x *InitPrimaryAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPrimaryAccountRequest.ProtoReflect.Descriptor instead.
func (*InitPrimaryAccountRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{70}
}

type InitPrimaryAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitPrimaryAccountResponse) Reset() {
	*x = InitPrimaryAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPrimaryAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPrimaryAccountResponse) ProtoMessage() {}

func (x *InitPrimaryAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPrimaryAccountResponse.ProtoReflect.Descriptor instead.
func (*InitPrimaryAccountResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{71}
}

var File_chat_proto protoreflect.FileDescriptor

var file_chat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x61,
	0x6c, 0x6b, 0x22, 0x2a, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x69,
	0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x65, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x40, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x8f,
	0x02, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x3e, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x65, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x44,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x44,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x0b, 0x22, 0x2e, 0x0a, 0x16,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x42, 0x0a, 0x17,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x22, 0x31, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0x43, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x3f, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x43, 0x0a, 0x18, 0x46, 0x69, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x19,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x55, 0x55, 0x49, 0x44, 0x73, 0x22, 0x35, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x55, 0x55, 0x49,
	0x44, 0x73, 0x22, 0x51, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x4c, 0x6c, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41,
	0x4c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x1f, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x1a, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x1b, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x4b, 0x0a,
	0x1a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x1b, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x22, 0x49, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a,
	0x19, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x49, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x49, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x5e, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x13,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x16, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x63, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x22, 0x40, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x2a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x55, 0x55, 0x49,
	0x44, 0x73, 0x22, 0x40, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x12, 0x48,
	0x69, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22,
	0x15, 0x0a, 0x13, 0x48, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x14, 0x55, 0x6e, 0x73, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x17, 0x0a, 0x15,
	0x55, 0x6e, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x13, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x6f, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x06, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x72,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0x6c,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72,
	0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x73, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xab,
	0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x2f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x41,
	0x64, 0x64, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x67, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61, 0x67, 0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x41,
	0x64, 0x64, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x49, 0x44, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x49, 0x44, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1c, 0x0a, 0x1a, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x32,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x01, 0x2a, 0x9e, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x42, 0x59, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x42, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45,
	0x54, 0x10, 0x05, 0x2a, 0x1f, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x49, 0x4f, 0x10, 0x01, 0x2a, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x54,
	0x45, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x2a, 0x3a, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x49, 0x43,
	0x4b, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x27, 0x0a, 0x06, 0x54, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x02, 0x2a, 0x3e,
	0x0a, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a,
	0x0a, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x32, 0x92,
	0x12, 0x0a, 0x0b, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42,
	0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x55, 0x6e, 0x73, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x55,
	0x6e, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x0b, 0x48, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x48, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x18,
	0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x19, 0x2e,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5a, 0x0a, 0x13, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x12,
	0x1c, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x69, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x4c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x25, 0x2e,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x4c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x4c, 0x6c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x46, 0x69,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x2e,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x17, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x2e,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x61, 0x6c, 0x6b,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x17, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x61, 0x6c,
	0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x67, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xb0, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x44, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x49, 0x44, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x44,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x54, 0x61, 0x6c, 0x6b,
	0x52, 0x50, 0x43, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData = file_chat_proto_rawDesc
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_proto_rawDescData)
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 72)
var file_chat_proto_goTypes = []interface{}{
	(EventType)(0),                           // 0: talk.EventType
	(SettingKey)(0),                          // 1: talk.SettingKey
	(ProfileKey)(0),                          // 2: talk.ProfileKey
	(ContactKey)(0),                          // 3: talk.ContactKey
	(MessageType)(0),                         // 4: talk.MessageType
	(ToType)(0),                              // 5: talk.ToType
	(FriendStatus)(0),                        // 6: talk.FriendStatus
	(*FetchEventsRequest)(nil),               // 7: talk.FetchEventsRequest
	(*FetchEventsResponse)(nil),              // 8: talk.FetchEventsResponse
	(*Event)(nil),                            // 9: talk.Event
	(*GetSettingRequest)(nil),                // 10: talk.GetSettingRequest
	(*GetSettingResponse)(nil),               // 11: talk.GetSettingResponse
	(*UpdateSettingRequest)(nil),             // 12: talk.UpdateSettingRequest
	(*UpdateSettingResponse)(nil),            // 13: talk.UpdateSettingResponse
	(*Setting)(nil),                          // 14: talk.Setting
	(*GetProfileRequest)(nil),                // 15: talk.GetProfileRequest
	(*GetProfileResponse)(nil),               // 16: talk.GetProfileResponse
	(*UpdateProfileRequest)(nil),             // 17: talk.UpdateProfileRequest
	(*UpdateProfileResponse)(nil),            // 18: talk.UpdateProfileResponse
	(*Profile)(nil),                          // 19: talk.Profile
	(*FindUserByEmailRequest)(nil),           // 20: talk.FindUserByEmailRequest
	(*FindUserByEmailResponse)(nil),          // 21: talk.FindUserByEmailResponse
	(*FindUserByTicketRequest)(nil),          // 22: talk.FindUserByTicketRequest
	(*FindUserByTicketResponse)(nil),         // 23: talk.FindUserByTicketResponse
	(*FindUserByUserIDRequest)(nil),          // 24: talk.FindUserByUserIDRequest
	(*FindUserByUserIDResponse)(nil),         // 25: talk.FindUserByUserIDResponse
	(*GetAllBlockedIdsRequest)(nil),          // 26: talk.GetAllBlockedIdsRequest
	(*GetAllBlockedIdsResponse)(nil),         // 27: talk.GetAllBlockedIdsResponse
	(*GetFriendRequestStatusRequest)(nil),    // 28: talk.GetFriendRequestStatusRequest
	(*GetFriendRequestStatusResponse)(nil),   // 29: talk.GetFriendRequestStatusResponse
	(*GetALlFriendRequestedIdsRequest)(nil),  // 30: talk.GetALlFriendRequestedIdsRequest
	(*GetALlFriendRequestedIdsResponse)(nil), // 31: talk.GetALlFriendRequestedIdsResponse
	(*GetAllFriendRequestIdsRequest)(nil),    // 32: talk.GetAllFriendRequestIdsRequest
	(*GetAllFriendRequestIdsResponse)(nil),   // 33: talk.GetAllFriendRequestIdsResponse
	(*GetAllFriendIdsRequest)(nil),           // 34: talk.GetAllFriendIdsRequest
	(*GetAllFriendIdsResponse)(nil),          // 35: talk.GetAllFriendIdsResponse
	(*RejectFriendRequestRequest)(nil),       // 36: talk.RejectFriendRequestRequest
	(*RejectFriendRequestResponse)(nil),      // 37: talk.RejectFriendRequestResponse
	(*AcceptFriendRequestRequest)(nil),       // 38: talk.AcceptFriendRequestRequest
	(*AcceptFriendRequestResponse)(nil),      // 39: talk.AcceptFriendRequestResponse
	(*SendFriendRequestRequest)(nil),         // 40: talk.SendFriendRequestRequest
	(*SendFriendRequestResponse)(nil),        // 41: talk.SendFriendRequestResponse
	(*FriendRequest)(nil),                    // 42: talk.FriendRequest
	(*ReportContactRequest)(nil),             // 43: talk.ReportContactRequest
	(*ReportContactResponse)(nil),            // 44: talk.ReportContactResponse
	(*BlockContactRequest)(nil),              // 45: talk.BlockContactRequest
	(*BlockContactResponse)(nil),             // 46: talk.BlockContactResponse
	(*UpdateContactRequest)(nil),             // 47: talk.UpdateContactRequest
	(*UpdateContactResponse)(nil),            // 48: talk.UpdateContactResponse
	(*GetContactsRequest)(nil),               // 49: talk.GetContactsRequest
	(*GetContactsResponse)(nil),              // 50: talk.GetContactsResponse
	(*ReportMessageRequest)(nil),             // 51: talk.ReportMessageRequest
	(*ReportMessageResponse)(nil),            // 52: talk.ReportMessageResponse
	(*HideMessageRequest)(nil),               // 53: talk.HideMessageRequest
	(*HideMessageResponse)(nil),              // 54: talk.HideMessageResponse
	(*UnsendMessageRequest)(nil),             // 55: talk.UnsendMessageRequest
	(*UnsendMessageResponse)(nil),            // 56: talk.UnsendMessageResponse
	(*EditMessageRequest)(nil),               // 57: talk.EditMessageRequest
	(*EditMessageResponse)(nil),              // 58: talk.EditMessageResponse
	(*SendMessageRequest)(nil),               // 59: talk.SendMessageRequest
	(*SendMessageResponse)(nil),              // 60: talk.SendMessageResponse
	(*Message)(nil),                          // 61: talk.Message
	(*Reader)(nil),                           // 62: talk.Reader
	(*GetContactRequest)(nil),                // 63: talk.GetContactRequest
	(*GetContactResponse)(nil),               // 64: talk.GetContactResponse
	(*Contact)(nil),                          // 65: talk.Contact
	(*Tag)(nil),                              // 66: talk.Tag
	(*GetAllTagsRequest)(nil),                // 67: talk.GetAllTagsRequest
	(*GetAllTagsResponse)(nil),               // 68: talk.GetAllTagsResponse
	(*CreateTagRequest)(nil),                 // 69: talk.CreateTagRequest
	(*CreateTagResponse)(nil),                // 70: talk.CreateTagResponse
	(*DeleteTagRequest)(nil),                 // 71: talk.DeleteTagRequest
	(*DeleteTagResponse)(nil),                // 72: talk.DeleteTagResponse
	(*AddTagToContactRequest)(nil),           // 73: talk.AddTagToContactRequest
	(*AddTagToContactResponse)(nil),          // 74: talk.AddTagToContactResponse
	(*VerifyIDTokenRequest)(nil),             // 75: talk.VerifyIDTokenRequest
	(*VerifyIDTokenResponse)(nil),            // 76: talk.VerifyIDTokenResponse
	(*InitPrimaryAccountRequest)(nil),        // 77: talk.InitPrimaryAccountRequest
	(*InitPrimaryAccountResponse)(nil),       // 78: talk.InitPrimaryAccountResponse
}
var file_chat_proto_depIdxs = []int32{
	9,  // 0: talk.FetchEventsResponse.events:type_name -> talk.Event
	0,  // 1: talk.FetchEventsResponse.eventType:type_name -> talk.EventType
	61, // 2: talk.Event.message:type_name -> talk.Message
	14, // 3: talk.GetSettingResponse.setting:type_name -> talk.Setting
	1,  // 4: talk.UpdateSettingRequest.keys:type_name -> talk.SettingKey
	14, // 5: talk.UpdateSettingRequest.setting:type_name -> talk.Setting
	14, // 6: talk.UpdateSettingResponse.setting:type_name -> talk.Setting
	19, // 7: talk.GetProfileResponse.profile:type_name -> talk.Profile
	2,  // 8: talk.UpdateProfileRequest.keys:type_name -> talk.ProfileKey
	19, // 9: talk.UpdateProfileRequest.profile:type_name -> talk.Profile
	65, // 10: talk.FindUserByEmailResponse.contact:type_name -> talk.Contact
	65, // 11: talk.FindUserByTicketResponse.contact:type_name -> talk.Contact
	65, // 12: talk.FindUserByUserIDResponse.contact:type_name -> talk.Contact
	42, // 13: talk.GetFriendRequestStatusResponse.requests:type_name -> talk.FriendRequest
	42, // 14: talk.GetALlFriendRequestedIdsResponse.requests:type_name -> talk.FriendRequest
	42, // 15: talk.GetAllFriendRequestIdsResponse.requests:type_name -> talk.FriendRequest
	42, // 16: talk.RejectFriendRequestRequest.request:type_name -> talk.FriendRequest
	65, // 17: talk.RejectFriendRequestResponse.contact:type_name -> talk.Contact
	42, // 18: talk.AcceptFriendRequestRequest.request:type_name -> talk.FriendRequest
	65, // 19: talk.AcceptFriendRequestResponse.contact:type_name -> talk.Contact
	42, // 20: talk.SendFriendRequestRequest.request:type_name -> talk.FriendRequest
	65, // 21: talk.SendFriendRequestResponse.contact:type_name -> talk.Contact
	3,  // 22: talk.UpdateContactRequest.key:type_name -> talk.ContactKey
	65, // 23: talk.UpdateContactRequest.contact:type_name -> talk.Contact
	65, // 24: talk.UpdateContactResponse.contact:type_name -> talk.Contact
	65, // 25: talk.GetContactsResponse.contacts:type_name -> talk.Contact
	61, // 26: talk.EditMessageRequest.message:type_name -> talk.Message
	61, // 27: talk.EditMessageResponse.message:type_name -> talk.Message
	61, // 28: talk.SendMessageRequest.message:type_name -> talk.Message
	61, // 29: talk.SendMessageResponse.message:type_name -> talk.Message
	5,  // 30: talk.Message.toType:type_name -> talk.ToType
	4,  // 31: talk.Message.msgType:type_name -> talk.MessageType
	62, // 32: talk.Message.readers:type_name -> talk.Reader
	65, // 33: talk.GetContactResponse.contact:type_name -> talk.Contact
	6,  // 34: talk.Contact.status:type_name -> talk.FriendStatus
	66, // 35: talk.GetAllTagsResponse.tags:type_name -> talk.Tag
	66, // 36: talk.CreateTagRequest.tag:type_name -> talk.Tag
	59, // 37: talk.TalkService.SendMessage:input_type -> talk.SendMessageRequest
	57, // 38: talk.TalkService.EditMessage:input_type -> talk.EditMessageRequest
	55, // 39: talk.TalkService.UnsendMessage:input_type -> talk.UnsendMessageRequest
	53, // 40: talk.TalkService.HideMessage:input_type -> talk.HideMessageRequest
	51, // 41: talk.TalkService.ReportMessage:input_type -> talk.ReportMessageRequest
	63, // 42: talk.TalkService.GetContact:input_type -> talk.GetContactRequest
	49, // 43: talk.TalkService.GetContacts:input_type -> talk.GetContactsRequest
	47, // 44: talk.TalkService.UpdateContact:input_type -> talk.UpdateContactRequest
	45, // 45: talk.TalkService.BlockContact:input_type -> talk.BlockContactRequest
	43, // 46: talk.TalkService.ReportContact:input_type -> talk.ReportContactRequest
	40, // 47: talk.TalkService.SendFriendRequest:input_type -> talk.SendFriendRequestRequest
	38, // 48: talk.TalkService.AcceptFriendRequest:input_type -> talk.AcceptFriendRequestRequest
	36, // 49: talk.TalkService.RejectFriendRequest:input_type -> talk.RejectFriendRequestRequest
	34, // 50: talk.TalkService.GetAllFriendIds:input_type -> talk.GetAllFriendIdsRequest
	32, // 51: talk.TalkService.GetAllFriendRequestIds:input_type -> talk.GetAllFriendRequestIdsRequest
	30, // 52: talk.TalkService.GetALlFriendRequestedIds:input_type -> talk.GetALlFriendRequestedIdsRequest
	28, // 53: talk.TalkService.GetFriendRequestStatus:input_type -> talk.GetFriendRequestStatusRequest
	26, // 54: talk.TalkService.GetAllBlockedIds:input_type -> talk.GetAllBlockedIdsRequest
	24, // 55: talk.TalkService.FindUserByUserID:input_type -> talk.FindUserByUserIDRequest
	22, // 56: talk.TalkService.FindUserByTicket:input_type -> talk.FindUserByTicketRequest
	20, // 57: talk.TalkService.FindUserByEmail:input_type -> talk.FindUserByEmailRequest
	17, // 58: talk.TalkService.UpdateProfile:input_type -> talk.UpdateProfileRequest
	15, // 59: talk.TalkService.GetProfile:input_type -> talk.GetProfileRequest
	12, // 60: talk.TalkService.UpdateSetting:input_type -> talk.UpdateSettingRequest
	10, // 61: talk.TalkService.GetSetting:input_type -> talk.GetSettingRequest
	7,  // 62: talk.TalkService.FetchEvents:input_type -> talk.FetchEventsRequest
	67, // 63: talk.TalkService.GetAllTags:input_type -> talk.GetAllTagsRequest
	69, // 64: talk.TalkService.CreateTag:input_type -> talk.CreateTagRequest
	71, // 65: talk.TalkService.DeleteTag:input_type -> talk.DeleteTagRequest
	73, // 66: talk.TalkService.AddTagToContact:input_type -> talk.AddTagToContactRequest
	75, // 67: talk.AuthService.VerifyIDToken:input_type -> talk.VerifyIDTokenRequest
	77, // 68: talk.AuthService.InitPrimaryAccount:input_type -> talk.InitPrimaryAccountRequest
	60, // 69: talk.TalkService.SendMessage:output_type -> talk.SendMessageResponse
	58, // 70: talk.TalkService.EditMessage:output_type -> talk.EditMessageResponse
	56, // 71: talk.TalkService.UnsendMessage:output_type -> talk.UnsendMessageResponse
	54, // 72: talk.TalkService.HideMessage:output_type -> talk.HideMessageResponse
	52, // 73: talk.TalkService.ReportMessage:output_type -> talk.ReportMessageResponse
	64, // 74: talk.TalkService.GetContact:output_type -> talk.GetContactResponse
	50, // 75: talk.TalkService.GetContacts:output_type -> talk.GetContactsResponse
	48, // 76: talk.TalkService.UpdateContact:output_type -> talk.UpdateContactResponse
	46, // 77: talk.TalkService.BlockContact:output_type -> talk.BlockContactResponse
	44, // 78: talk.TalkService.ReportContact:output_type -> talk.ReportContactResponse
	41, // 79: talk.TalkService.SendFriendRequest:output_type -> talk.SendFriendRequestResponse
	39, // 80: talk.TalkService.AcceptFriendRequest:output_type -> talk.AcceptFriendRequestResponse
	37, // 81: talk.TalkService.RejectFriendRequest:output_type -> talk.RejectFriendRequestResponse
	35, // 82: talk.TalkService.GetAllFriendIds:output_type -> talk.GetAllFriendIdsResponse
	33, // 83: talk.TalkService.GetAllFriendRequestIds:output_type -> talk.GetAllFriendRequestIdsResponse
	31, // 84: talk.TalkService.GetALlFriendRequestedIds:output_type -> talk.GetALlFriendRequestedIdsResponse
	29, // 85: talk.TalkService.GetFriendRequestStatus:output_type -> talk.GetFriendRequestStatusResponse
	27, // 86: talk.TalkService.GetAllBlockedIds:output_type -> talk.GetAllBlockedIdsResponse
	25, // 87: talk.TalkService.FindUserByUserID:output_type -> talk.FindUserByUserIDResponse
	23, // 88: talk.TalkService.FindUserByTicket:output_type -> talk.FindUserByTicketResponse
	21, // 89: talk.TalkService.FindUserByEmail:output_type -> talk.FindUserByEmailResponse
	18, // 90: talk.TalkService.UpdateProfile:output_type -> talk.UpdateProfileResponse
	16, // 91: talk.TalkService.GetProfile:output_type -> talk.GetProfileResponse
	13, // 92: talk.TalkService.UpdateSetting:output_type -> talk.UpdateSettingResponse
	11, // 93: talk.TalkService.GetSetting:output_type -> talk.GetSettingResponse
	8,  // 94: talk.TalkService.FetchEvents:output_type -> talk.FetchEventsResponse
	68, // 95: talk.TalkService.GetAllTags:output_type -> talk.GetAllTagsResponse
	70, // 96: talk.TalkService.CreateTag:output_type -> talk.CreateTagResponse
	72, // 97: talk.TalkService.DeleteTag:output_type -> talk.DeleteTagResponse
	74, // 98: talk.TalkService.AddTagToContact:output_type -> talk.AddTagToContactResponse
	76, // 99: talk.AuthService.VerifyIDToken:output_type -> talk.VerifyIDTokenResponse
	78, // 100: talk.AuthService.InitPrimaryAccount:output_type -> talk.InitPrimaryAccountResponse
	69, // [69:101] is the sub-list for method output_type
	37, // [37:69] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserByEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserByEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserByTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserByTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserByUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserByUserIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBlockedIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBlockedIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendRequestStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendRequestStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetALlFriendRequestedIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetALlFriendRequestedIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllFriendRequestIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllFriendRequestIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllFriendIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllFriendIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectFriendRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectFriendRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptFriendRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptFriendRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFriendRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFriendRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagToContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagToContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyIDTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyIDTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPrimaryAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPrimaryAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   72,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		EnumInfos:         file_chat_proto_enumTypes,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_rawDesc = nil
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TalkServiceClient is the client API for TalkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TalkServiceClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageResponse, error)
	UnsendMessage(ctx context.Context, in *UnsendMessageRequest, opts ...grpc.CallOption) (*UnsendMessageResponse, error)
	HideMessage(ctx context.Context, in *HideMessageRequest, opts ...grpc.CallOption) (*HideMessageResponse, error)
	ReportMessage(ctx context.Context, in *ReportMessageRequest, opts ...grpc.CallOption) (*ReportMessageResponse, error)
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error)
	UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error)
	BlockContact(ctx context.Context, in *BlockContactRequest, opts ...grpc.CallOption) (*BlockContactResponse, error)
	ReportContact(ctx context.Context, in *ReportContactRequest, opts ...grpc.CallOption) (*ReportContactResponse, error)
	SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error)
	AcceptFriendRequest(ctx context.Context, in *AcceptFriendRequestRequest, opts ...grpc.CallOption) (*AcceptFriendRequestResponse, error)
	RejectFriendRequest(ctx context.Context, in *RejectFriendRequestRequest, opts ...grpc.CallOption) (*RejectFriendRequestResponse, error)
	GetAllFriendIds(ctx context.Context, in *GetAllFriendIdsRequest, opts ...grpc.CallOption) (*GetAllFriendIdsResponse, error)
	GetAllFriendRequestIds(ctx context.Context, in *GetAllFriendRequestIdsRequest, opts ...grpc.CallOption) (*GetAllFriendRequestIdsResponse, error)
	GetALlFriendRequestedIds(ctx context.Context, in *GetALlFriendRequestedIdsRequest, opts ...grpc.CallOption) (*GetALlFriendRequestedIdsResponse, error)
	GetFriendRequestStatus(ctx context.Context, in *GetFriendRequestStatusRequest, opts ...grpc.CallOption) (*GetFriendRequestStatusResponse, error)
	GetAllBlockedIds(ctx context.Context, in *GetAllBlockedIdsRequest, opts ...grpc.CallOption) (*GetAllBlockedIdsResponse, error)
	FindUserByUserID(ctx context.Context, in *FindUserByUserIDRequest, opts ...grpc.CallOption) (*FindUserByUserIDResponse, error)
	FindUserByTicket(ctx context.Context, in *FindUserByTicketRequest, opts ...grpc.CallOption) (*FindUserByTicketResponse, error)
	FindUserByEmail(ctx context.Context, in *FindUserByEmailRequest, opts ...grpc.CallOption) (*FindUserByEmailResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingResponse, error)
	GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error)
	FetchEvents(ctx context.Context, in *FetchEventsRequest, opts ...grpc.CallOption) (TalkService_FetchEventsClient, error)
	GetAllTags(ctx context.Context, in *GetAllTagsRequest, opts ...grpc.CallOption) (*GetAllTagsResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
	AddTagToContact(ctx context.Context, in *AddTagToContactRequest, opts ...grpc.CallOption) (*AddTagToContactResponse, error)
}

type talkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkServiceClient(cc grpc.ClientConnInterface) TalkServiceClient {
	return &talkServiceClient{cc}
}

func (c *talkServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageResponse, error) {
	out := new(EditMessageResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/EditMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) UnsendMessage(ctx context.Context, in *UnsendMessageRequest, opts ...grpc.CallOption) (*UnsendMessageResponse, error) {
	out := new(UnsendMessageResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/UnsendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) HideMessage(ctx context.Context, in *HideMessageRequest, opts ...grpc.CallOption) (*HideMessageResponse, error) {
	out := new(HideMessageResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/HideMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) ReportMessage(ctx context.Context, in *ReportMessageRequest, opts ...grpc.CallOption) (*ReportMessageResponse, error) {
	out := new(ReportMessageResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/ReportMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/GetContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error) {
	out := new(GetContactsResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/GetContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error) {
	out := new(UpdateContactResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/UpdateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) BlockContact(ctx context.Context, in *BlockContactRequest, opts ...grpc.CallOption) (*BlockContactResponse, error) {
	out := new(BlockContactResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/BlockContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) ReportContact(ctx context.Context, in *ReportContactRequest, opts ...grpc.CallOption) (*ReportContactResponse, error) {
	out := new(ReportContactResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/ReportContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error) {
	out := new(SendFriendRequestResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/SendFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) AcceptFriendRequest(ctx context.Context, in *AcceptFriendRequestRequest, opts ...grpc.CallOption) (*AcceptFriendRequestResponse, error) {
	out := new(AcceptFriendRequestResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/AcceptFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) RejectFriendRequest(ctx context.Context, in *RejectFriendRequestRequest, opts ...grpc.CallOption) (*RejectFriendRequestResponse, error) {
	out := new(RejectFriendRequestResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/RejectFriendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetAllFriendIds(ctx context.Context, in *GetAllFriendIdsRequest, opts ...grpc.CallOption) (*GetAllFriendIdsResponse, error) {
	out := new(GetAllFriendIdsResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/GetAllFriendIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetAllFriendRequestIds(ctx context.Context, in *GetAllFriendRequestIdsRequest, opts ...grpc.CallOption) (*GetAllFriendRequestIdsResponse, error) {
	out := new(GetAllFriendRequestIdsResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/GetAllFriendRequestIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetALlFriendRequestedIds(ctx context.Context, in *GetALlFriendRequestedIdsRequest, opts ...grpc.CallOption) (*GetALlFriendRequestedIdsResponse, error) {
	out := new(GetALlFriendRequestedIdsResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/GetALlFriendRequestedIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetFriendRequestStatus(ctx context.Context, in *GetFriendRequestStatusRequest, opts ...grpc.CallOption) (*GetFriendRequestStatusResponse, error) {
	out := new(GetFriendRequestStatusResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/GetFriendRequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetAllBlockedIds(ctx context.Context, in *GetAllBlockedIdsRequest, opts ...grpc.CallOption) (*GetAllBlockedIdsResponse, error) {
	out := new(GetAllBlockedIdsResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/GetAllBlockedIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) FindUserByUserID(ctx context.Context, in *FindUserByUserIDRequest, opts ...grpc.CallOption) (*FindUserByUserIDResponse, error) {
	out := new(FindUserByUserIDResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/FindUserByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) FindUserByTicket(ctx context.Context, in *FindUserByTicketRequest, opts ...grpc.CallOption) (*FindUserByTicketResponse, error) {
	out := new(FindUserByTicketResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/FindUserByTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) FindUserByEmail(ctx context.Context, in *FindUserByEmailRequest, opts ...grpc.CallOption) (*FindUserByEmailResponse, error) {
	out := new(FindUserByEmailResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/FindUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingResponse, error) {
	out := new(UpdateSettingResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/UpdateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error) {
	out := new(GetSettingResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/GetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) FetchEvents(ctx context.Context, in *FetchEventsRequest, opts ...grpc.CallOption) (TalkService_FetchEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TalkService_serviceDesc.Streams[0], "/talk.TalkService/FetchEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &talkServiceFetchEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TalkService_FetchEventsClient interface {
	Recv() (*FetchEventsResponse, error)
	grpc.ClientStream
}

type talkServiceFetchEventsClient struct {
	grpc.ClientStream
}

func (x *talkServiceFetchEventsClient) Recv() (*FetchEventsResponse, error) {
	m := new(FetchEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *talkServiceClient) GetAllTags(ctx context.Context, in *GetAllTagsRequest, opts ...grpc.CallOption) (*GetAllTagsResponse, error) {
	out := new(GetAllTagsResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/GetAllTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) AddTagToContact(ctx context.Context, in *AddTagToContactRequest, opts ...grpc.CallOption) (*AddTagToContactResponse, error) {
	out := new(AddTagToContactResponse)
	err := c.cc.Invoke(ctx, "/talk.TalkService/AddTagToContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalkServiceServer is the server API for TalkService service.
type TalkServiceServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	EditMessage(context.Context, *EditMessageRequest) (*EditMessageResponse, error)
	UnsendMessage(context.Context, *UnsendMessageRequest) (*UnsendMessageResponse, error)
	HideMessage(context.Context, *HideMessageRequest) (*HideMessageResponse, error)
	ReportMessage(context.Context, *ReportMessageRequest) (*ReportMessageResponse, error)
	GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error)
	GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error)
	UpdateContact(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error)
	BlockContact(context.Context, *BlockContactRequest) (*BlockContactResponse, error)
	ReportContact(context.Context, *ReportContactRequest) (*ReportContactResponse, error)
	SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestResponse, error)
	AcceptFriendRequest(context.Context, *AcceptFriendRequestRequest) (*AcceptFriendRequestResponse, error)
	RejectFriendRequest(context.Context, *RejectFriendRequestRequest) (*RejectFriendRequestResponse, error)
	GetAllFriendIds(context.Context, *GetAllFriendIdsRequest) (*GetAllFriendIdsResponse, error)
	GetAllFriendRequestIds(context.Context, *GetAllFriendRequestIdsRequest) (*GetAllFriendRequestIdsResponse, error)
	GetALlFriendRequestedIds(context.Context, *GetALlFriendRequestedIdsRequest) (*GetALlFriendRequestedIdsResponse, error)
	GetFriendRequestStatus(context.Context, *GetFriendRequestStatusRequest) (*GetFriendRequestStatusResponse, error)
	GetAllBlockedIds(context.Context, *GetAllBlockedIdsRequest) (*GetAllBlockedIdsResponse, error)
	FindUserByUserID(context.Context, *FindUserByUserIDRequest) (*FindUserByUserIDResponse, error)
	FindUserByTicket(context.Context, *FindUserByTicketRequest) (*FindUserByTicketResponse, error)
	FindUserByEmail(context.Context, *FindUserByEmailRequest) (*FindUserByEmailResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingResponse, error)
	GetSetting(context.Context, *GetSettingRequest) (*GetSettingResponse, error)
	FetchEvents(*FetchEventsRequest, TalkService_FetchEventsServer) error
	GetAllTags(context.Context, *GetAllTagsRequest) (*GetAllTagsResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
	AddTagToContact(context.Context, *AddTagToContactRequest) (*AddTagToContactResponse, error)
}

// UnimplementedTalkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTalkServiceServer struct {
}

func (*UnimplementedTalkServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedTalkServiceServer) EditMessage(context.Context, *EditMessageRequest) (*EditMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (*UnimplementedTalkServiceServer) UnsendMessage(context.Context, *UnsendMessageRequest) (*UnsendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsendMessage not implemented")
}
func (*UnimplementedTalkServiceServer) HideMessage(context.Context, *HideMessageRequest) (*HideMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HideMessage not implemented")
}
func (*UnimplementedTalkServiceServer) ReportMessage(context.Context, *ReportMessageRequest) (*ReportMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMessage not implemented")
}
func (*UnimplementedTalkServiceServer) GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (*UnimplementedTalkServiceServer) GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (*UnimplementedTalkServiceServer) UpdateContact(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (*UnimplementedTalkServiceServer) BlockContact(context.Context, *BlockContactRequest) (*BlockContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockContact not implemented")
}
func (*UnimplementedTalkServiceServer) ReportContact(context.Context, *ReportContactRequest) (*ReportContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportContact not implemented")
}
func (*UnimplementedTalkServiceServer) SendFriendRequest(context.Context, *SendFriendRequestRequest) (*SendFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendRequest not implemented")
}
func (*UnimplementedTalkServiceServer) AcceptFriendRequest(context.Context, *AcceptFriendRequestRequest) (*AcceptFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriendRequest not implemented")
}
func (*UnimplementedTalkServiceServer) RejectFriendRequest(context.Context, *RejectFriendRequestRequest) (*RejectFriendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectFriendRequest not implemented")
}
func (*UnimplementedTalkServiceServer) GetAllFriendIds(context.Context, *GetAllFriendIdsRequest) (*GetAllFriendIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFriendIds not implemented")
}
func (*UnimplementedTalkServiceServer) GetAllFriendRequestIds(context.Context, *GetAllFriendRequestIdsRequest) (*GetAllFriendRequestIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFriendRequestIds not implemented")
}
func (*UnimplementedTalkServiceServer) GetALlFriendRequestedIds(context.Context, *GetALlFriendRequestedIdsRequest) (*GetALlFriendRequestedIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetALlFriendRequestedIds not implemented")
}
func (*UnimplementedTalkServiceServer) GetFriendRequestStatus(context.Context, *GetFriendRequestStatusRequest) (*GetFriendRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequestStatus not implemented")
}
func (*UnimplementedTalkServiceServer) GetAllBlockedIds(context.Context, *GetAllBlockedIdsRequest) (*GetAllBlockedIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBlockedIds not implemented")
}
func (*UnimplementedTalkServiceServer) FindUserByUserID(context.Context, *FindUserByUserIDRequest) (*FindUserByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByUserID not implemented")
}
func (*UnimplementedTalkServiceServer) FindUserByTicket(context.Context, *FindUserByTicketRequest) (*FindUserByTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByTicket not implemented")
}
func (*UnimplementedTalkServiceServer) FindUserByEmail(context.Context, *FindUserByEmailRequest) (*FindUserByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByEmail not implemented")
}
func (*UnimplementedTalkServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (*UnimplementedTalkServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (*UnimplementedTalkServiceServer) UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (*UnimplementedTalkServiceServer) GetSetting(context.Context, *GetSettingRequest) (*GetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (*UnimplementedTalkServiceServer) FetchEvents(*FetchEventsRequest, TalkService_FetchEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchEvents not implemented")
}
func (*UnimplementedTalkServiceServer) GetAllTags(context.Context, *GetAllTagsRequest) (*GetAllTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTags not implemented")
}
func (*UnimplementedTalkServiceServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedTalkServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedTalkServiceServer) AddTagToContact(context.Context, *AddTagToContactRequest) (*AddTagToContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTagToContact not implemented")
}

func RegisterTalkServiceServer(s *grpc.Server, srv TalkServiceServer) {
	s.RegisterService(&_TalkService_serviceDesc, srv)
}

func _TalkService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/EditMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).EditMessage(ctx, req.(*EditMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_UnsendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UnsendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/UnsendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UnsendMessage(ctx, req.(*UnsendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_HideMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HideMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).HideMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/HideMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).HideMessage(ctx, req.(*HideMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_ReportMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).ReportMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/ReportMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).ReportMessage(ctx, req.(*ReportMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/GetContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/GetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/UpdateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UpdateContact(ctx, req.(*UpdateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_BlockContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).BlockContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/BlockContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).BlockContact(ctx, req.(*BlockContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_ReportContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).ReportContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/ReportContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).ReportContact(ctx, req.(*ReportContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_SendFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).SendFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/SendFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).SendFriendRequest(ctx, req.(*SendFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_AcceptFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).AcceptFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/AcceptFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).AcceptFriendRequest(ctx, req.(*AcceptFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_RejectFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectFriendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).RejectFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/RejectFriendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).RejectFriendRequest(ctx, req.(*RejectFriendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetAllFriendIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFriendIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetAllFriendIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/GetAllFriendIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetAllFriendIds(ctx, req.(*GetAllFriendIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetAllFriendRequestIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFriendRequestIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetAllFriendRequestIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/GetAllFriendRequestIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetAllFriendRequestIds(ctx, req.(*GetAllFriendRequestIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetALlFriendRequestedIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetALlFriendRequestedIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetALlFriendRequestedIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/GetALlFriendRequestedIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetALlFriendRequestedIds(ctx, req.(*GetALlFriendRequestedIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetFriendRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetFriendRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/GetFriendRequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetFriendRequestStatus(ctx, req.(*GetFriendRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetAllBlockedIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBlockedIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetAllBlockedIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/GetAllBlockedIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetAllBlockedIds(ctx, req.(*GetAllBlockedIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_FindUserByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).FindUserByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/FindUserByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).FindUserByUserID(ctx, req.(*FindUserByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_FindUserByTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).FindUserByTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/FindUserByTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).FindUserByTicket(ctx, req.(*FindUserByTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_FindUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).FindUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/FindUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).FindUserByEmail(ctx, req.(*FindUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/UpdateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).UpdateSetting(ctx, req.(*UpdateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/GetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetSetting(ctx, req.(*GetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_FetchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TalkServiceServer).FetchEvents(m, &talkServiceFetchEventsServer{stream})
}

type TalkService_FetchEventsServer interface {
	Send(*FetchEventsResponse) error
	grpc.ServerStream
}

type talkServiceFetchEventsServer struct {
	grpc.ServerStream
}

func (x *talkServiceFetchEventsServer) Send(m *FetchEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TalkService_GetAllTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetAllTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/GetAllTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetAllTags(ctx, req.(*GetAllTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_AddTagToContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagToContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).AddTagToContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.TalkService/AddTagToContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).AddTagToContact(ctx, req.(*AddTagToContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TalkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "talk.TalkService",
	HandlerType: (*TalkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _TalkService_SendMessage_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _TalkService_EditMessage_Handler,
		},
		{
			MethodName: "UnsendMessage",
			Handler:    _TalkService_UnsendMessage_Handler,
		},
		{
			MethodName: "HideMessage",
			Handler:    _TalkService_HideMessage_Handler,
		},
		{
			MethodName: "ReportMessage",
			Handler:    _TalkService_ReportMessage_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _TalkService_GetContact_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _TalkService_GetContacts_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _TalkService_UpdateContact_Handler,
		},
		{
			MethodName: "BlockContact",
			Handler:    _TalkService_BlockContact_Handler,
		},
		{
			MethodName: "ReportContact",
			Handler:    _TalkService_ReportContact_Handler,
		},
		{
			MethodName: "SendFriendRequest",
			Handler:    _TalkService_SendFriendRequest_Handler,
		},
		{
			MethodName: "AcceptFriendRequest",
			Handler:    _TalkService_AcceptFriendRequest_Handler,
		},
		{
			MethodName: "RejectFriendRequest",
			Handler:    _TalkService_RejectFriendRequest_Handler,
		},
		{
			MethodName: "GetAllFriendIds",
			Handler:    _TalkService_GetAllFriendIds_Handler,
		},
		{
			MethodName: "GetAllFriendRequestIds",
			Handler:    _TalkService_GetAllFriendRequestIds_Handler,
		},
		{
			MethodName: "GetALlFriendRequestedIds",
			Handler:    _TalkService_GetALlFriendRequestedIds_Handler,
		},
		{
			MethodName: "GetFriendRequestStatus",
			Handler:    _TalkService_GetFriendRequestStatus_Handler,
		},
		{
			MethodName: "GetAllBlockedIds",
			Handler:    _TalkService_GetAllBlockedIds_Handler,
		},
		{
			MethodName: "FindUserByUserID",
			Handler:    _TalkService_FindUserByUserID_Handler,
		},
		{
			MethodName: "FindUserByTicket",
			Handler:    _TalkService_FindUserByTicket_Handler,
		},
		{
			MethodName: "FindUserByEmail",
			Handler:    _TalkService_FindUserByEmail_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _TalkService_UpdateProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _TalkService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _TalkService_UpdateSetting_Handler,
		},
		{
			MethodName: "GetSetting",
			Handler:    _TalkService_GetSetting_Handler,
		},
		{
			MethodName: "GetAllTags",
			Handler:    _TalkService_GetAllTags_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _TalkService_CreateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _TalkService_DeleteTag_Handler,
		},
		{
			MethodName: "AddTagToContact",
			Handler:    _TalkService_AddTagToContact_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchEvents",
			Handler:       _TalkService_FetchEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	VerifyIDToken(ctx context.Context, in *VerifyIDTokenRequest, opts ...grpc.CallOption) (*VerifyIDTokenResponse, error)
	InitPrimaryAccount(ctx context.Context, in *InitPrimaryAccountRequest, opts ...grpc.CallOption) (*InitPrimaryAccountResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) VerifyIDToken(ctx context.Context, in *VerifyIDTokenRequest, opts ...grpc.CallOption) (*VerifyIDTokenResponse, error) {
	out := new(VerifyIDTokenResponse)
	err := c.cc.Invoke(ctx, "/talk.AuthService/VerifyIDToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) InitPrimaryAccount(ctx context.Context, in *InitPrimaryAccountRequest, opts ...grpc.CallOption) (*InitPrimaryAccountResponse, error) {
	out := new(InitPrimaryAccountResponse)
	err := c.cc.Invoke(ctx, "/talk.AuthService/InitPrimaryAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	VerifyIDToken(context.Context, *VerifyIDTokenRequest) (*VerifyIDTokenResponse, error)
	InitPrimaryAccount(context.Context, *InitPrimaryAccountRequest) (*InitPrimaryAccountResponse, error)
}

// UnimplementedAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (*UnimplementedAuthServiceServer) VerifyIDToken(context.Context, *VerifyIDTokenRequest) (*VerifyIDTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyIDToken not implemented")
}
func (*UnimplementedAuthServiceServer) InitPrimaryAccount(context.Context, *InitPrimaryAccountRequest) (*InitPrimaryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPrimaryAccount not implemented")
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_VerifyIDToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyIDTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyIDToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.AuthService/VerifyIDToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyIDToken(ctx, req.(*VerifyIDTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_InitPrimaryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitPrimaryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).InitPrimaryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk.AuthService/InitPrimaryAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).InitPrimaryAccount(ctx, req.(*InitPrimaryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "talk.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyIDToken",
			Handler:    _AuthService_VerifyIDToken_Handler,
		},
		{
			MethodName: "InitPrimaryAccount",
			Handler:    _AuthService_InitPrimaryAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
