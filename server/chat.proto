syntax = "proto3";

package talk;

service TalkService {
    // Message Func
    rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);
    rpc EditMessage (EditMessageRequest) returns (EditMessageResponse);
    rpc UnsendMessage (UnsendMessageRequest) returns (UnsendMessageResponse);
    rpc HideMessage (HideMessageRequest) returns (HideMessageResponse);
    rpc ReportMessage (ReportMessageRequest) returns (ReportMessageResponse);

    rpc GetContact (GetContactRequest) returns (GetContactResponse);
    rpc GetContacts (GetContactsRequest) returns (GetContactsResponse);
    rpc UpdateContact (UpdateContactRequest) returns (UpdateContactResponse);
    rpc BlockContact (BlockContactRequest) returns (BlockContactResponse);
    rpc ReportContact (ReportContactRequest) returns (ReportContactResponse);
}

message ReportContactRequest {
    string uuid = 1;
    string reason = 2;
    map<string, string> metaData = 3;
}
message ReportContactResponse {}

message BlockContactRequest {
    string uuid  =1;
}
message BlockContactResponse{}

message UpdateContactRequest {
    Contact contact = 1;
}
message UpdateContactResponse {
    Contact contact = 1;
}

message GetContactsRequest {
    repeated string uuids = 1;
}
message GetContactsResponse {
    repeated Contact contacts = 1;
}
message ReportMessageRequest {
    int64 messageID = 1;
    string reason = 2;
}
message ReportMessageResponse{}

message HideMessageRequest {
    int64 messageID = 1;
}
message HideMessageResponse{}

message UnsendMessageRequest {
    string  messageID = 1;
}
message UnsendMessageResponse{}

message EditMessageRequest {
    Message message = 1;
}

message EditMessageResponse {
    Message message = 1;
}

message SendMessageRequest {
    Message message = 1;
}

message SendMessageResponse {
    Message message = 1;
}

message Message {
    string text = 1;
    string fromID = 2;
    string toID = 3;
    reserved 4, 5, 6;
    ToType toType = 7;
    MessageType msgType = 8;
    reserved 9;
    int64 messageID = 10;
    int64 readCount = 11;
    repeated Reader readers = 12;
}

message Reader {
    string uuid = 1;
    int64  index = 2;
    int64 readTime = 3;
    int64 messageID = 4;
}

enum MessageType {
    TEXT = 0;
    IMAGE = 1;
    VIDEO = 2;
    STICKER = 3;
}

enum ToType {
    USER = 0;
    GROUP = 1;
    ROOM = 2;
}

message GetContactRequest {
    string uuid = 1;
}

message GetContactResponse {
    Contact contact = 1;
}

message Contact {
    string uuid = 1;
    string name = 2;
    string overWrittenName = 3;
    map<string, string> metaData = 4;
    FriendStatus status = 5;
    reserved 6, 7;
    repeated Tag tags = 8;
}

enum FriendStatus {
    friend = 0;
    block = 1;
    delete = 2;
}

message Tag {
    string name = 1;
    string description = 2;
    string color = 3;
    string creatorUUID = 4;
    int64 createdTime = 5;
}
