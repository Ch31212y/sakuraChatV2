syntax = "proto3";

option go_package = ".;TalkRPC";

package talk;

//protoc --go_out=plugins=grpc:../pb chat.proto

//pip install grpcio-tools
//python -m grpc.tools.protoc -I. --python_out=pb --grpc_python_out=pb chat.proto



message FetchEventsRequest {
    int64 index = 1;
}
message FetchEventsResponse {
    repeated Event events = 1;
    EventType eventType = 2;
}

enum EventType {
    RECEIVE_MESSAGE = 0;
    SEND_MESSAGE = 1;
}

message Event {
    int64 index =1;
    Message message = 2;
}

message GetSettingRequest {}
message GetSettingResponse {
    Setting setting = 1;
}


message UpdateSettingRequest {
    repeated SettingKey keys = 1;
    Setting setting = 2;
}
message UpdateSettingResponse {
    Setting setting = 1;
}

enum SettingKey {
    PRIVATE_USER_ID = 0;
    ALLOW_SEARCH_BY_PRIVATE_USER_ID = 1;
    EMAIL = 2;
    ALLOW_SEARCH_BY_EMAIL = 3;
    USER_TICKET = 4;
    ALLOW_SEARCH_BY_USER_TICKET = 5;
}

message Setting {
    string privateUserID = 1;
    bool allowSearchByPrivateUserID = 2;
    string email = 3;
    bool allowSearchByEmail = 4;
    string userTicket = 5;
    bool allowSearchByUserTicket = 6;
}


message GetProfileRequest {}
message GetProfileResponse {
    Profile profile = 1;
}


message UpdateProfileRequest {
    repeated ProfileKey keys = 1;
    Profile profile = 2;
}
message UpdateProfileResponse {
    Profile profile = 1;
}


enum ProfileKey {
    NAME = 0;
    BIO = 1;
}

message Profile {
    string uuid = 1;
    string name = 2;
    string bio = 3;
    reserved 4, 5 to 10;
    string iconPath = 11;
    string coverPath = 12;
    string twitterID = 13;
    string instagramID = 14;
    string githubID = 15;
}


message FindUserByEmailRequest {
    string email = 1;
}
message FindUserByEmailResponse {
    Contact contact = 1;
}


message FindUserByTicketRequest {
    string ticket = 1;
}
message FindUserByTicketResponse {
    Contact contact = 1;
}


message FindUserByUserIDRequest {
    string userID = 1;
}
message FindUserByUserIDResponse {
    Contact contact = 1;
}


message GetAllBlockedIdsRequest {}
message GetAllBlockedIdsResponse {
    repeated string uuids = 1;
}


message GetFriendRequestStatusRequest {
    repeated string uuids = 1;
}
message GetFriendRequestStatusResponse {
    repeated FriendRequest requests = 1;
}


message GetALlFriendRequestedIdsRequest {}
message GetALlFriendRequestedIdsResponse {
    repeated FriendRequest requests = 1;
}


message GetAllFriendRequestIdsRequest {}
message GetAllFriendRequestIdsResponse {
    repeated FriendRequest requests = 1;
}


message GetAllFriendIdsRequest {
}
message GetAllFriendIdsResponse {
    repeated string ids = 1;
}


message RejectFriendRequestRequest {
    FriendRequest request = 1;
}
message RejectFriendRequestResponse {
    Contact contact = 1;
}


message AcceptFriendRequestRequest {
    FriendRequest request = 1;
}
message AcceptFriendRequestResponse {
    Contact contact = 1;
}


message SendFriendRequestRequest {
    FriendRequest request = 1;
}
message SendFriendRequestResponse {
    Contact contact = 1;
}


message FriendRequest {
    string fromID  =1;
    string toID = 2;
    int64 createdTIme = 3;
    map<string, string> metaData = 4;
    bool isAccepted = 5;
    bool isRejected = 6;
    int64 acceptedOrRejectedAt = 7;
}

message ReportContactRequest {
    string uuid = 1;
    string reason = 2;
    map<string, string> metaData = 3;
}
message ReportContactResponse {}


message BlockContactRequest {
    string uuid  =1;
}
message BlockContactResponse{}


message UpdateContactRequest {
    Contact contact = 1;
}
message UpdateContactResponse {
    Contact contact = 1;
}


message GetContactsRequest {
    repeated string uuids = 1;
}
message GetContactsResponse {
    repeated Contact contacts = 1;
}


message ReportMessageRequest {
    int64 messageID = 1;
    string reason = 2;
}
message ReportMessageResponse{}


message HideMessageRequest {
    int64 messageID = 1;
}
message HideMessageResponse{}


message UnsendMessageRequest {
    string  messageID = 1;
}
message UnsendMessageResponse{}

message EditMessageRequest {
    Message message = 1;
}
message EditMessageResponse {
    Message message = 1;
}


message SendMessageRequest {
    Message message = 1;
}
message SendMessageResponse {
    Message message = 1;
}


message Message {
    string text = 1;
    string fromID = 2;
    string toID = 3;
    reserved 4, 5, 6;
    ToType toType = 7;
    MessageType msgType = 8;
    reserved 9;
    int64 messageID = 10;
    int64 readCount = 11;
    repeated Reader readers = 12;
}

message Reader {
    string uuid = 1;
    int64  index = 2;
    int64 readTime = 3;
    int64 messageID = 4;
}

enum MessageType {
    TEXT = 0;
    IMAGE = 1;
    VIDEO = 2;
    STICKER = 3;
}

enum ToType {
    USER = 0;
    GROUP = 1;
    ROOM = 2;
}

message GetContactRequest {
    string uuid = 1;
}
message GetContactResponse {
    Contact contact = 1;
}


message Contact {
    string uuid = 1;
    string name = 2;
    string overWrittenName = 3;
    map<string, string> metaData = 4;
    FriendStatus status = 5;
    reserved 6, 7;
    repeated Tag tags = 8;
}

enum FriendStatus {
    friend = 0;
    block = 1;
    delete = 2;
}

message Tag {
    string name = 1;
    string description = 2;
    string color = 3;
    string creatorUUID = 4;
    int64 createdTime = 5;
}



service TalkService {

    rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);
    rpc EditMessage (EditMessageRequest) returns (EditMessageResponse);
    rpc UnsendMessage (UnsendMessageRequest) returns (UnsendMessageResponse);
    rpc HideMessage (HideMessageRequest) returns (HideMessageResponse);
    rpc ReportMessage (ReportMessageRequest) returns (ReportMessageResponse);

    rpc GetContact (GetContactRequest) returns (GetContactResponse);
    rpc GetContacts (GetContactsRequest) returns (GetContactsResponse);
    rpc UpdateContact (UpdateContactRequest) returns (UpdateContactResponse);
    rpc BlockContact (BlockContactRequest) returns (BlockContactResponse);
    rpc ReportContact (ReportContactRequest) returns (ReportContactResponse);

    rpc SendFriendRequest (SendFriendRequestRequest) returns (SendFriendRequestResponse);
    rpc AcceptFriendRequest (AcceptFriendRequestRequest) returns (AcceptFriendRequestResponse);
    rpc RejectFriendRequest (RejectFriendRequestRequest) returns (RejectFriendRequestResponse);
    rpc GetAllFriendIds (GetAllFriendIdsRequest) returns (GetAllFriendIdsResponse);
    rpc GetAllFriendRequestIds (GetAllFriendRequestIdsRequest) returns (GetAllFriendRequestIdsResponse);
    rpc GetALlFriendRequestedIds (GetALlFriendRequestedIdsRequest) returns (GetALlFriendRequestedIdsResponse);
    rpc GetFriendRequestStatus (GetFriendRequestStatusRequest) returns (GetFriendRequestStatusResponse);
    rpc GetAllBlockedIds (GetAllBlockedIdsRequest) returns (GetAllBlockedIdsResponse);

    rpc FindUserByUserID (FindUserByUserIDRequest) returns (FindUserByUserIDResponse);
    rpc FindUserByTicket (FindUserByTicketRequest) returns (FindUserByTicketResponse);
    rpc FindUserByEmail (FindUserByEmailRequest) returns (FindUserByEmailResponse);

    rpc UpdateProfile (UpdateProfileRequest) returns (UpdateProfileResponse);
    rpc GetProfile (GetProfileRequest) returns (GetProfileResponse);

    rpc UpdateSetting (UpdateSettingRequest) returns (UpdateSettingResponse);
    rpc GetSetting (GetSettingRequest) returns (GetSettingResponse);

    rpc FetchEvents (FetchEventsRequest) returns (stream FetchEventsResponse);
}






message VerifyIDTokenRequest {
    string jwtToken = 1;
}
message VerifyIDTokenResponse {
    string jwtToken = 1;
}

service AuthService {
    rpc VerifyIDToken (VerifyIDTokenRequest) returns (VerifyIDTokenResponse);
}
